# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import dyadic as module_0
import sympy.matrices.repmatrix as module_1


def test_case_0():
    bool_0 = False
    dyadic_0 = module_0.Dyadic(bool_0)
    assert (
        f"{type(dyadic_0).__module__}.{type(dyadic_0).__qualname__}" == "dyadic.Dyadic"
    )
    assert dyadic_0.args == []
    assert (
        f"{type(module_0.Dyadic.func).__module__}.{type(module_0.Dyadic.func).__qualname__}"
        == "builtins.property"
    )


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xaf[\x1c\xf8>P"
    module_0.Dyadic(bytes_0)


def test_case_2():
    bool_0 = False
    dyadic_0 = module_0.Dyadic(bool_0)
    assert (
        f"{type(dyadic_0).__module__}.{type(dyadic_0).__qualname__}" == "dyadic.Dyadic"
    )
    assert dyadic_0.args == []
    assert (
        f"{type(module_0.Dyadic.func).__module__}.{type(module_0.Dyadic.func).__qualname__}"
        == "builtins.property"
    )
    var_0 = dyadic_0.dot(dyadic_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "dyadic.Dyadic"
    assert var_0.args == []
    var_1 = dyadic_0.evalf(chop=var_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "EYmV&J1'\x0b#Mwr="
    list_0 = [str_0, str_0, str_0, str_0]
    dyadic_0 = module_0.Dyadic(list_0)
    assert (
        f"{type(dyadic_0).__module__}.{type(dyadic_0).__qualname__}" == "dyadic.Dyadic"
    )
    assert dyadic_0.args == [("EEEE", "Y", "m")]
    assert (
        f"{type(module_0.Dyadic.func).__module__}.{type(module_0.Dyadic.func).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    dyadic_0.dot(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"\x02\xdcv>\xef6\x17\x05v\x14"
    list_0 = [bytes_0]
    dyadic_0 = module_0.Dyadic(list_0)
    assert (
        f"{type(dyadic_0).__module__}.{type(dyadic_0).__qualname__}" == "dyadic.Dyadic"
    )
    assert dyadic_0.args == [b"\x02\xdcv>\xef6\x17\x05v\x14"]
    assert (
        f"{type(module_0.Dyadic.func).__module__}.{type(module_0.Dyadic.func).__qualname__}"
        == "builtins.property"
    )
    var_0 = dyadic_0.__rsub__(dyadic_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "dyadic.Dyadic"
    assert var_0.args == []
    var_1 = dyadic_0.__str__()
    assert var_1 == "2*(220|118)"
    var_0.__eq__(bytes_0)


def test_case_5():
    bool_0 = False
    dyadic_0 = module_0.Dyadic(bool_0)
    assert (
        f"{type(dyadic_0).__module__}.{type(dyadic_0).__qualname__}" == "dyadic.Dyadic"
    )
    assert dyadic_0.args == []
    assert (
        f"{type(module_0.Dyadic.func).__module__}.{type(module_0.Dyadic.func).__qualname__}"
        == "builtins.property"
    )
    dyadic_1 = module_0.Dyadic(dyadic_0)
    assert (
        f"{type(dyadic_1).__module__}.{type(dyadic_1).__qualname__}" == "dyadic.Dyadic"
    )
    assert dyadic_1.args == []


def test_case_6():
    bool_0 = False
    dyadic_0 = module_0.Dyadic(bool_0)
    assert (
        f"{type(dyadic_0).__module__}.{type(dyadic_0).__qualname__}" == "dyadic.Dyadic"
    )
    assert dyadic_0.args == []
    assert (
        f"{type(module_0.Dyadic.func).__module__}.{type(module_0.Dyadic.func).__qualname__}"
        == "builtins.property"
    )
    var_0 = dyadic_0.__str__()
    assert var_0 == "0"


def test_case_7():
    bool_0 = False
    dyadic_0 = module_0.Dyadic(bool_0)
    assert (
        f"{type(dyadic_0).__module__}.{type(dyadic_0).__qualname__}" == "dyadic.Dyadic"
    )
    assert dyadic_0.args == []
    assert (
        f"{type(module_0.Dyadic.func).__module__}.{type(module_0.Dyadic.func).__qualname__}"
        == "builtins.property"
    )
    var_0 = dyadic_0.simplify()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "dyadic.Dyadic"
    assert var_0.args == []


@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b"\x05\xdc>\xef6\xcc\x05v\x14"
    list_0 = [bytes_0]
    dyadic_0 = module_0.Dyadic(list_0)
    assert (
        f"{type(dyadic_0).__module__}.{type(dyadic_0).__qualname__}" == "dyadic.Dyadic"
    )
    assert dyadic_0.args == [b"\x05\xdc>\xef6\xcc\x05v\x14"]
    assert (
        f"{type(module_0.Dyadic.func).__module__}.{type(module_0.Dyadic.func).__qualname__}"
        == "builtins.property"
    )
    var_0 = dyadic_0.__rsub__(dyadic_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "dyadic.Dyadic"
    assert var_0.args == []
    var_1 = dyadic_0.__ne__(var_0)
    assert var_1 is True
    var_2 = dyadic_0.__str__()
    assert var_2 == "5*(220|62)"
    var_3 = dyadic_0.__truediv__(var_1)
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "dyadic.Dyadic"
    assert (
        f"{type(var_3.args).__module__}.{type(var_3.args).__qualname__}"
        == "builtins.list"
    )
    assert len(var_3.args) == 1
    dyadic_0.evalf(strict=list_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = False
    dyadic_0 = module_0.Dyadic(bool_0)
    assert (
        f"{type(dyadic_0).__module__}.{type(dyadic_0).__qualname__}" == "dyadic.Dyadic"
    )
    assert dyadic_0.args == []
    assert (
        f"{type(module_0.Dyadic.func).__module__}.{type(module_0.Dyadic.func).__qualname__}"
        == "builtins.property"
    )
    dyadic_0.dt(bool_0)


def test_case_10():
    bool_0 = False
    dyadic_0 = module_0.Dyadic(bool_0)
    assert (
        f"{type(dyadic_0).__module__}.{type(dyadic_0).__qualname__}" == "dyadic.Dyadic"
    )
    assert dyadic_0.args == []
    assert (
        f"{type(module_0.Dyadic.func).__module__}.{type(module_0.Dyadic.func).__qualname__}"
        == "builtins.property"
    )
    var_0 = dyadic_0.__mul__(bool_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "dyadic.Dyadic"
    assert var_0.args == []
    var_1 = dyadic_0.evalf(chop=var_0)
    var_2 = dyadic_0.subs()
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "dyadic.Dyadic"
    assert var_2.args == []


@pytest.mark.xfail(strict=True)
def test_case_11():
    dict_0 = {}
    dyadic_0 = module_0.Dyadic(dict_0)
    assert (
        f"{type(dyadic_0).__module__}.{type(dyadic_0).__qualname__}" == "dyadic.Dyadic"
    )
    assert dyadic_0.args == []
    assert (
        f"{type(module_0.Dyadic.func).__module__}.{type(module_0.Dyadic.func).__qualname__}"
        == "builtins.property"
    )
    rep_matrix_0 = module_1.RepMatrix()
    var_0 = dyadic_0.xreplace(dict_0)
    rep_matrix_0.cofactorMatrix()


@pytest.mark.xfail(strict=True)
def test_case_12():
    bytes_0 = b"\x02\xdcv>\xef6\x17\x05v\x14"
    list_0 = [bytes_0]
    dyadic_0 = module_0.Dyadic(list_0)
    assert (
        f"{type(dyadic_0).__module__}.{type(dyadic_0).__qualname__}" == "dyadic.Dyadic"
    )
    assert dyadic_0.args == [b"\x02\xdcv>\xef6\x17\x05v\x14"]
    assert (
        f"{type(module_0.Dyadic.func).__module__}.{type(module_0.Dyadic.func).__qualname__}"
        == "builtins.property"
    )
    var_0 = dyadic_0.__rsub__(dyadic_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "dyadic.Dyadic"
    assert var_0.args == []
    var_1 = var_0.__ne__(var_0)
    assert var_1 is False
    var_2 = dyadic_0.__str__()
    assert var_2 == "2*(220|118)"
    var_3 = var_0.n()
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "dyadic.Dyadic"
    assert var_3.args == []
    bytes_0.applyfunc(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    bytes_0 = b"\x118\xe9\xa4\xd1\x08"
    list_0 = [bytes_0, bytes_0, bytes_0]
    dyadic_0 = module_0.Dyadic(list_0)
    assert (
        f"{type(dyadic_0).__module__}.{type(dyadic_0).__qualname__}" == "dyadic.Dyadic"
    )
    assert dyadic_0.args == [(51, 56, 233)]
    assert (
        f"{type(module_0.Dyadic.func).__module__}.{type(module_0.Dyadic.func).__qualname__}"
        == "builtins.property"
    )
    var_0 = dyadic_0.__neg__()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "dyadic.Dyadic"
    assert (
        f"{type(var_0.args).__module__}.{type(var_0.args).__qualname__}"
        == "builtins.list"
    )
    assert len(var_0.args) == 1
    var_1 = dyadic_0.__str__()
    assert var_1 == "51*(56|233)"
    bytes_0.doit()


@pytest.mark.xfail(strict=True)
def test_case_14():
    bool_0 = False
    dyadic_0 = module_0.Dyadic(bool_0)
    assert (
        f"{type(dyadic_0).__module__}.{type(dyadic_0).__qualname__}" == "dyadic.Dyadic"
    )
    assert dyadic_0.args == []
    assert (
        f"{type(module_0.Dyadic.func).__module__}.{type(module_0.Dyadic.func).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    dyadic_0.express(none_type_0)


def test_case_15():
    bool_0 = False
    dyadic_0 = module_0.Dyadic(bool_0)
    assert (
        f"{type(dyadic_0).__module__}.{type(dyadic_0).__qualname__}" == "dyadic.Dyadic"
    )
    assert dyadic_0.args == []
    assert (
        f"{type(module_0.Dyadic.func).__module__}.{type(module_0.Dyadic.func).__qualname__}"
        == "builtins.property"
    )
    with pytest.raises(TypeError):
        dyadic_0.applyfunc(dyadic_0)


def test_case_16():
    bool_0 = False
    dyadic_0 = module_0.Dyadic(bool_0)
    assert (
        f"{type(dyadic_0).__module__}.{type(dyadic_0).__qualname__}" == "dyadic.Dyadic"
    )
    assert dyadic_0.args == []
    assert (
        f"{type(module_0.Dyadic.func).__module__}.{type(module_0.Dyadic.func).__qualname__}"
        == "builtins.property"
    )
    var_0 = dyadic_0.doit()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "dyadic.Dyadic"
    assert var_0.args == []
    with pytest.raises(TypeError):
        dyadic_0.applyfunc(dyadic_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    bytes_0 = b"\xaf\x19E\xf4\x06\xde\xd7\xaa\\\\"
    list_0 = [bytes_0, bytes_0]
    dyadic_0 = module_0.Dyadic(list_0)
    assert (
        f"{type(dyadic_0).__module__}.{type(dyadic_0).__qualname__}" == "dyadic.Dyadic"
    )
    assert dyadic_0.args == [(350, 25, 69)]
    assert (
        f"{type(module_0.Dyadic.func).__module__}.{type(module_0.Dyadic.func).__qualname__}"
        == "builtins.property"
    )
    var_0 = dyadic_0.__sub__(dyadic_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "dyadic.Dyadic"
    assert var_0.args == []
    bytes_0.simplify()


@pytest.mark.xfail(strict=True)
def test_case_18():
    bool_0 = False
    dyadic_0 = module_0.Dyadic(bool_0)
    assert (
        f"{type(dyadic_0).__module__}.{type(dyadic_0).__qualname__}" == "dyadic.Dyadic"
    )
    assert dyadic_0.args == []
    assert (
        f"{type(module_0.Dyadic.func).__module__}.{type(module_0.Dyadic.func).__qualname__}"
        == "builtins.property"
    )
    var_0 = dyadic_0.dot(dyadic_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "dyadic.Dyadic"
    assert var_0.args == []
    var_1 = var_0.subs()
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "dyadic.Dyadic"
    assert var_1.args == []
    var_2 = dyadic_0.__eq__(dyadic_0)
    assert var_2 is True
    var_3 = dyadic_0.simplify()
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "dyadic.Dyadic"
    assert var_3.args == []
    var_4 = var_1.xreplace(var_2)
    var_5 = var_0.__neg__()
    assert f"{type(var_5).__module__}.{type(var_5).__qualname__}" == "dyadic.Dyadic"
    assert var_5.args == []
    var_6 = dyadic_0.evalf()
    var_7 = dyadic_0.doit()
    assert f"{type(var_7).__module__}.{type(var_7).__qualname__}" == "dyadic.Dyadic"
    assert var_7.args == []
    tuple_0 = (var_5, var_7)
    var_4.to_matrix(tuple_0)


def test_case_19():
    bool_0 = False
    dyadic_0 = module_0.Dyadic(bool_0)
    assert (
        f"{type(dyadic_0).__module__}.{type(dyadic_0).__qualname__}" == "dyadic.Dyadic"
    )
    assert dyadic_0.args == []
    assert (
        f"{type(module_0.Dyadic.func).__module__}.{type(module_0.Dyadic.func).__qualname__}"
        == "builtins.property"
    )
    var_0 = dyadic_0.evalf(chop=dyadic_0)


@pytest.mark.xfail(strict=True)
def test_case_20():
    bool_0 = False
    dyadic_0 = module_0.Dyadic(bool_0)
    assert (
        f"{type(dyadic_0).__module__}.{type(dyadic_0).__qualname__}" == "dyadic.Dyadic"
    )
    assert dyadic_0.args == []
    assert (
        f"{type(module_0.Dyadic.func).__module__}.{type(module_0.Dyadic.func).__qualname__}"
        == "builtins.property"
    )
    var_0 = dyadic_0.__eq__(dyadic_0)
    assert var_0 is True
    var_1 = dyadic_0.__str__()
    assert var_1 == "0"
    list_0 = [bool_0, dyadic_0, bool_0]
    var_2 = dyadic_0.xreplace(list_0)
    var_3 = var_2.__neg__()
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "dyadic.Dyadic"
    assert var_3.args == []
    var_2.to_matrix(var_0, var_1)


def test_case_21():
    str_0 = "EYmV&J1'\x0b#Mwr="
    list_0 = [str_0, str_0, str_0, str_0]
    dyadic_0 = module_0.Dyadic(list_0)
    assert (
        f"{type(dyadic_0).__module__}.{type(dyadic_0).__qualname__}" == "dyadic.Dyadic"
    )
    assert dyadic_0.args == [("EEEE", "Y", "m")]
    assert (
        f"{type(module_0.Dyadic.func).__module__}.{type(module_0.Dyadic.func).__qualname__}"
        == "builtins.property"
    )


@pytest.mark.xfail(strict=True)
def test_case_22():
    bytes_0 = b"\xaf\x19E\xf4\x06\xde\xd7\xaa\\\\"
    list_0 = [bytes_0]
    dyadic_0 = module_0.Dyadic(list_0)
    assert (
        f"{type(dyadic_0).__module__}.{type(dyadic_0).__qualname__}" == "dyadic.Dyadic"
    )
    assert dyadic_0.args == [b"\xaf\x19E\xf4\x06\xde\xd7\xaa\\\\"]
    assert (
        f"{type(module_0.Dyadic.func).__module__}.{type(module_0.Dyadic.func).__qualname__}"
        == "builtins.property"
    )
    dyadic_0.xreplace(list_0)


def test_case_23():
    bytes_0 = b"\xaf\x19E\xf4\x06\xde\xd7\xaa\\\\"
    list_0 = [bytes_0]
    dyadic_0 = module_0.Dyadic(list_0)
    assert (
        f"{type(dyadic_0).__module__}.{type(dyadic_0).__qualname__}" == "dyadic.Dyadic"
    )
    assert dyadic_0.args == [b"\xaf\x19E\xf4\x06\xde\xd7\xaa\\\\"]
    assert (
        f"{type(module_0.Dyadic.func).__module__}.{type(module_0.Dyadic.func).__qualname__}"
        == "builtins.property"
    )
    var_0 = dyadic_0.__ne__(dyadic_0)
    assert var_0 is False
    with pytest.raises(TypeError):
        dyadic_0.applyfunc(var_0)


@pytest.mark.xfail(strict=True)
def test_case_24():
    bytes_0 = b"\xaf\x19E\xf4\x06\xde\xd7\xaa\\\\"
    list_0 = [bytes_0, bytes_0]
    dyadic_0 = module_0.Dyadic(list_0)
    assert (
        f"{type(dyadic_0).__module__}.{type(dyadic_0).__qualname__}" == "dyadic.Dyadic"
    )
    assert dyadic_0.args == [(350, 25, 69)]
    assert (
        f"{type(module_0.Dyadic.func).__module__}.{type(module_0.Dyadic.func).__qualname__}"
        == "builtins.property"
    )
    dyadic_0.subs(*list_0)


def test_case_25():
    bytes_0 = b"\x02\xdcv>\xef6\x17\x05v\x14"
    list_0 = [bytes_0]
    dyadic_0 = module_0.Dyadic(list_0)
    assert (
        f"{type(dyadic_0).__module__}.{type(dyadic_0).__qualname__}" == "dyadic.Dyadic"
    )
    assert dyadic_0.args == [b"\x02\xdcv>\xef6\x17\x05v\x14"]
    assert (
        f"{type(module_0.Dyadic.func).__module__}.{type(module_0.Dyadic.func).__qualname__}"
        == "builtins.property"
    )
    var_0 = dyadic_0.__rsub__(dyadic_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "dyadic.Dyadic"
    assert var_0.args == []
    var_1 = var_0.__ne__(var_0)
    assert var_1 is False
    var_2 = dyadic_0.__str__()
    assert var_2 == "2*(220|118)"
    var_3 = var_1.__eq__(bytes_0)
    var_4 = dyadic_0.dot(var_0)
    assert f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "dyadic.Dyadic"
    assert var_4.args == []


@pytest.mark.xfail(strict=True)
def test_case_26():
    bytes_0 = b"\xaf\x19E\xf4\x06\xde\xd7\xaa\\\\"
    list_0 = [bytes_0]
    dyadic_0 = module_0.Dyadic(list_0)
    assert (
        f"{type(dyadic_0).__module__}.{type(dyadic_0).__qualname__}" == "dyadic.Dyadic"
    )
    assert dyadic_0.args == [b"\xaf\x19E\xf4\x06\xde\xd7\xaa\\\\"]
    assert (
        f"{type(module_0.Dyadic.func).__module__}.{type(module_0.Dyadic.func).__qualname__}"
        == "builtins.property"
    )
    dyadic_0.dot(dyadic_0)


@pytest.mark.xfail(strict=True)
def test_case_27():
    bytes_0 = b"\x86\xda\xb2JX\xe7w\xaek?q\x1d\xb9\x89\x9b="
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    dyadic_0 = module_0.Dyadic(list_0)
    assert (
        f"{type(dyadic_0).__module__}.{type(dyadic_0).__qualname__}" == "dyadic.Dyadic"
    )
    assert dyadic_0.args == [(536, 218, 178)]
    assert (
        f"{type(module_0.Dyadic.func).__module__}.{type(module_0.Dyadic.func).__qualname__}"
        == "builtins.property"
    )
    dyadic_0.simplify()


@pytest.mark.xfail(strict=True)
def test_case_28():
    bytes_0 = b"\xaf\x19E\xf4\x06\xde\xd7\xaa\\\\"
    list_0 = [bytes_0]
    dyadic_0 = module_0.Dyadic(list_0)
    assert (
        f"{type(dyadic_0).__module__}.{type(dyadic_0).__qualname__}" == "dyadic.Dyadic"
    )
    assert dyadic_0.args == [b"\xaf\x19E\xf4\x06\xde\xd7\xaa\\\\"]
    assert (
        f"{type(module_0.Dyadic.func).__module__}.{type(module_0.Dyadic.func).__qualname__}"
        == "builtins.property"
    )
    bool_0 = False
    str_0 = "z^@1)R;3<v2c>=V"
    dict_0 = {str_0: bool_0, str_0: str_0, str_0: list_0}
    dyadic_0.doit(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_29():
    bytes_0 = b"^\x88XO5v\x82L\xf4\xf4ZV"
    list_0 = [bytes_0]
    dyadic_0 = module_0.Dyadic(list_0)
    assert (
        f"{type(dyadic_0).__module__}.{type(dyadic_0).__qualname__}" == "dyadic.Dyadic"
    )
    assert dyadic_0.args == [b"^\x88XO5v\x82L\xf4\xf4ZV"]
    assert (
        f"{type(module_0.Dyadic.func).__module__}.{type(module_0.Dyadic.func).__qualname__}"
        == "builtins.property"
    )
    dyadic_0.evalf(strict=list_0)


@pytest.mark.xfail(strict=True)
def test_case_30():
    bytes_0 = b"\x05\xdc>\xef6\xcc\x05v\x89\x14"
    list_0 = [bytes_0]
    dyadic_0 = module_0.Dyadic(list_0)
    assert (
        f"{type(dyadic_0).__module__}.{type(dyadic_0).__qualname__}" == "dyadic.Dyadic"
    )
    assert dyadic_0.args == [b"\x05\xdc>\xef6\xcc\x05v\x89\x14"]
    assert (
        f"{type(module_0.Dyadic.func).__module__}.{type(module_0.Dyadic.func).__qualname__}"
        == "builtins.property"
    )
    var_0 = dyadic_0.__rsub__(dyadic_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "dyadic.Dyadic"
    assert var_0.args == []
    var_1 = dyadic_0.__neg__()
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "dyadic.Dyadic"
    assert (
        f"{type(var_1.args).__module__}.{type(var_1.args).__qualname__}"
        == "builtins.list"
    )
    assert len(var_1.args) == 1
    var_2 = var_1.__str__()
    assert var_2 == "- 5*(220|62)"
    var_3 = var_1.simplify()
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "dyadic.Dyadic"
    assert (
        f"{type(var_3.args).__module__}.{type(var_3.args).__qualname__}"
        == "builtins.list"
    )
    assert len(var_3.args) == 1
    var_2.xreplace(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_31():
    bytes_0 = b"\x05\xdc>\xef6\xcc\x05v\x14"
    list_0 = [bytes_0]
    dyadic_0 = module_0.Dyadic(list_0)
    assert (
        f"{type(dyadic_0).__module__}.{type(dyadic_0).__qualname__}" == "dyadic.Dyadic"
    )
    assert dyadic_0.args == [b"\x05\xdc>\xef6\xcc\x05v\x14"]
    assert (
        f"{type(module_0.Dyadic.func).__module__}.{type(module_0.Dyadic.func).__qualname__}"
        == "builtins.property"
    )
    var_0 = dyadic_0.__rsub__(dyadic_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "dyadic.Dyadic"
    assert var_0.args == []
    var_1 = dyadic_0.__neg__()
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "dyadic.Dyadic"
    assert (
        f"{type(var_1.args).__module__}.{type(var_1.args).__qualname__}"
        == "builtins.list"
    )
    assert len(var_1.args) == 1
    var_2 = var_0.__ne__(var_1)
    assert var_2 is True
    var_3 = var_1.__str__()
    assert var_3 == "- 5*(220|62)"
    var_3.__neg__()


def test_case_32():
    bytes_0 = b"\x05\xdc>\xef6\xcc\x05v\x14"
    list_0 = [bytes_0]
    dyadic_0 = module_0.Dyadic(list_0)
    assert (
        f"{type(dyadic_0).__module__}.{type(dyadic_0).__qualname__}" == "dyadic.Dyadic"
    )
    assert dyadic_0.args == [b"\x05\xdc>\xef6\xcc\x05v\x14"]
    assert (
        f"{type(module_0.Dyadic.func).__module__}.{type(module_0.Dyadic.func).__qualname__}"
        == "builtins.property"
    )
    var_0 = dyadic_0.__neg__()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "dyadic.Dyadic"
    assert (
        f"{type(var_0.args).__module__}.{type(var_0.args).__qualname__}"
        == "builtins.list"
    )
    assert len(var_0.args) == 1
    var_1 = dyadic_0.__rsub__(dyadic_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "dyadic.Dyadic"
    assert var_1.args == []
    var_2 = var_1.__ne__(var_1)
    assert var_2 is False
    var_3 = dyadic_0.dot(var_1)
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "dyadic.Dyadic"
    assert var_3.args == []
    var_4 = var_0.n()
    assert f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "dyadic.Dyadic"
    assert (
        f"{type(var_4.args).__module__}.{type(var_4.args).__qualname__}"
        == "builtins.list"
    )
    assert len(var_4.args) == 1
    with pytest.raises(TypeError):
        var_3.applyfunc(var_4)


def test_case_33():
    bytes_0 = b"\x01\xfct\x11\xa5#whw\xd2\x87\xc8z\xc9"
    list_0 = [bytes_0]
    dyadic_0 = module_0.Dyadic(list_0)
    assert (
        f"{type(dyadic_0).__module__}.{type(dyadic_0).__qualname__}" == "dyadic.Dyadic"
    )
    assert dyadic_0.args == [b"\x01\xfct\x11\xa5#whw\xd2\x87\xc8z\xc9"]
    assert (
        f"{type(module_0.Dyadic.func).__module__}.{type(module_0.Dyadic.func).__qualname__}"
        == "builtins.property"
    )
    var_0 = dyadic_0.__rsub__(dyadic_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "dyadic.Dyadic"
    assert var_0.args == []
    var_1 = var_0.__ne__(var_0)
    assert var_1 is False
    var_2 = dyadic_0.__str__()
    assert var_2 == "(252|116)"
    var_3 = dyadic_0.dot(var_0)
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "dyadic.Dyadic"
    assert var_3.args == []
    var_4 = var_0.n()
    with pytest.raises(TypeError):
        var_3.applyfunc(var_3)
