# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import sympy.physics.mechanics.jointsmethod as module_0


def test_case_0():
    bytes_0 = b"&Q\xb3\x00\xf3\xe7\x93;q\xdb\xeb1\x04("
    joints_method_0 = module_0.JointsMethod(bytes_0)
    assert (
        f"{type(joints_method_0).__module__}.{type(joints_method_0).__qualname__}"
        == "sympy.physics.mechanics.jointsmethod.JointsMethod"
    )
    assert joints_method_0.frame == b"&Q\xb3\x00\xf3\xe7\x93;q\xdb\xeb1\x04("
    assert (
        f"{type(module_0.JointsMethod.bodies).__module__}.{type(module_0.JointsMethod.bodies).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.loads).__module__}.{type(module_0.JointsMethod.loads).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.q).__module__}.{type(module_0.JointsMethod.q).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.u).__module__}.{type(module_0.JointsMethod.u).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.kdes).__module__}.{type(module_0.JointsMethod.kdes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.forcing_full).__module__}.{type(module_0.JointsMethod.forcing_full).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.mass_matrix_full).__module__}.{type(module_0.JointsMethod.mass_matrix_full).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.mass_matrix).__module__}.{type(module_0.JointsMethod.mass_matrix).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.forcing).__module__}.{type(module_0.JointsMethod.forcing).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.method).__module__}.{type(module_0.JointsMethod.method).__qualname__}"
        == "builtins.property"
    )


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"&Q\xb3\x00\xf3\xe7\x93;q\xdb\xeb1\x04("
    module_0.JointsMethod(bytes_0, *bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    joints_method_0 = module_0.JointsMethod(none_type_0)
    assert (
        f"{type(joints_method_0).__module__}.{type(joints_method_0).__qualname__}"
        == "sympy.physics.mechanics.jointsmethod.JointsMethod"
    )
    assert joints_method_0.frame is None
    assert (
        f"{type(module_0.JointsMethod.bodies).__module__}.{type(module_0.JointsMethod.bodies).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.loads).__module__}.{type(module_0.JointsMethod.loads).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.q).__module__}.{type(module_0.JointsMethod.q).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.u).__module__}.{type(module_0.JointsMethod.u).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.kdes).__module__}.{type(module_0.JointsMethod.kdes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.forcing_full).__module__}.{type(module_0.JointsMethod.forcing_full).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.mass_matrix_full).__module__}.{type(module_0.JointsMethod.mass_matrix_full).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.mass_matrix).__module__}.{type(module_0.JointsMethod.mass_matrix).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.forcing).__module__}.{type(module_0.JointsMethod.forcing).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.method).__module__}.{type(module_0.JointsMethod.method).__qualname__}"
        == "builtins.property"
    )
    joints_method_0.form_eoms()


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "^e"
    joints_method_0 = module_0.JointsMethod(str_0)
    assert (
        f"{type(joints_method_0).__module__}.{type(joints_method_0).__qualname__}"
        == "sympy.physics.mechanics.jointsmethod.JointsMethod"
    )
    assert joints_method_0.frame == "^e"
    assert (
        f"{type(module_0.JointsMethod.bodies).__module__}.{type(module_0.JointsMethod.bodies).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.loads).__module__}.{type(module_0.JointsMethod.loads).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.q).__module__}.{type(module_0.JointsMethod.q).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.u).__module__}.{type(module_0.JointsMethod.u).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.kdes).__module__}.{type(module_0.JointsMethod.kdes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.forcing_full).__module__}.{type(module_0.JointsMethod.forcing_full).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.mass_matrix_full).__module__}.{type(module_0.JointsMethod.mass_matrix_full).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.mass_matrix).__module__}.{type(module_0.JointsMethod.mass_matrix).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.forcing).__module__}.{type(module_0.JointsMethod.forcing).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.method).__module__}.{type(module_0.JointsMethod.method).__qualname__}"
        == "builtins.property"
    )
    joints_method_0.forcing_full()


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"\x83\xc8\xeb"
    joints_method_0 = module_0.JointsMethod(bytes_0)
    assert (
        f"{type(joints_method_0).__module__}.{type(joints_method_0).__qualname__}"
        == "sympy.physics.mechanics.jointsmethod.JointsMethod"
    )
    assert joints_method_0.frame == b"\x83\xc8\xeb"
    assert (
        f"{type(module_0.JointsMethod.bodies).__module__}.{type(module_0.JointsMethod.bodies).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.loads).__module__}.{type(module_0.JointsMethod.loads).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.q).__module__}.{type(module_0.JointsMethod.q).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.u).__module__}.{type(module_0.JointsMethod.u).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.kdes).__module__}.{type(module_0.JointsMethod.kdes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.forcing_full).__module__}.{type(module_0.JointsMethod.forcing_full).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.mass_matrix_full).__module__}.{type(module_0.JointsMethod.mass_matrix_full).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.mass_matrix).__module__}.{type(module_0.JointsMethod.mass_matrix).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.forcing).__module__}.{type(module_0.JointsMethod.forcing).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.method).__module__}.{type(module_0.JointsMethod.method).__qualname__}"
        == "builtins.property"
    )
    str_0 = "C  @M@Yd'A$yZVvG+"
    joints_method_1 = module_0.JointsMethod(bytes_0)
    joints_method_2 = module_0.JointsMethod(str_0)
    joints_method_0.mass_matrix_full()


@pytest.mark.xfail(strict=True)
def test_case_5():
    complex_0 = 3476.76901 + 1239.3j
    joints_method_0 = module_0.JointsMethod(complex_0)
    assert (
        f"{type(joints_method_0).__module__}.{type(joints_method_0).__qualname__}"
        == "sympy.physics.mechanics.jointsmethod.JointsMethod"
    )
    assert joints_method_0.frame == (3476.76901 + 1239.3j)
    assert (
        f"{type(module_0.JointsMethod.bodies).__module__}.{type(module_0.JointsMethod.bodies).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.loads).__module__}.{type(module_0.JointsMethod.loads).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.q).__module__}.{type(module_0.JointsMethod.q).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.u).__module__}.{type(module_0.JointsMethod.u).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.kdes).__module__}.{type(module_0.JointsMethod.kdes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.forcing_full).__module__}.{type(module_0.JointsMethod.forcing_full).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.mass_matrix_full).__module__}.{type(module_0.JointsMethod.mass_matrix_full).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.mass_matrix).__module__}.{type(module_0.JointsMethod.mass_matrix).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.forcing).__module__}.{type(module_0.JointsMethod.forcing).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.method).__module__}.{type(module_0.JointsMethod.method).__qualname__}"
        == "builtins.property"
    )
    joints_method_0.mass_matrix()


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "j5^P2KNEZ8"
    joints_method_0 = module_0.JointsMethod(str_0)
    assert (
        f"{type(joints_method_0).__module__}.{type(joints_method_0).__qualname__}"
        == "sympy.physics.mechanics.jointsmethod.JointsMethod"
    )
    assert joints_method_0.frame == "j5^P2KNEZ8"
    assert (
        f"{type(module_0.JointsMethod.bodies).__module__}.{type(module_0.JointsMethod.bodies).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.loads).__module__}.{type(module_0.JointsMethod.loads).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.q).__module__}.{type(module_0.JointsMethod.q).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.u).__module__}.{type(module_0.JointsMethod.u).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.kdes).__module__}.{type(module_0.JointsMethod.kdes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.forcing_full).__module__}.{type(module_0.JointsMethod.forcing_full).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.mass_matrix_full).__module__}.{type(module_0.JointsMethod.mass_matrix_full).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.mass_matrix).__module__}.{type(module_0.JointsMethod.mass_matrix).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.forcing).__module__}.{type(module_0.JointsMethod.forcing).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.method).__module__}.{type(module_0.JointsMethod.method).__qualname__}"
        == "builtins.property"
    )
    joints_method_0.forcing()


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "^e"
    joints_method_0 = module_0.JointsMethod(str_0)
    assert (
        f"{type(joints_method_0).__module__}.{type(joints_method_0).__qualname__}"
        == "sympy.physics.mechanics.jointsmethod.JointsMethod"
    )
    assert joints_method_0.frame == "^e"
    assert (
        f"{type(module_0.JointsMethod.bodies).__module__}.{type(module_0.JointsMethod.bodies).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.loads).__module__}.{type(module_0.JointsMethod.loads).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.q).__module__}.{type(module_0.JointsMethod.q).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.u).__module__}.{type(module_0.JointsMethod.u).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.kdes).__module__}.{type(module_0.JointsMethod.kdes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.forcing_full).__module__}.{type(module_0.JointsMethod.forcing_full).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.mass_matrix_full).__module__}.{type(module_0.JointsMethod.mass_matrix_full).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.mass_matrix).__module__}.{type(module_0.JointsMethod.mass_matrix).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.forcing).__module__}.{type(module_0.JointsMethod.forcing).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.JointsMethod.method).__module__}.{type(module_0.JointsMethod.method).__qualname__}"
        == "builtins.property"
    )
    joints_method_1 = module_0.JointsMethod(joints_method_0)
    joints_method_1.rhs(joints_method_0)
