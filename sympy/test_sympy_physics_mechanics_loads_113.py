# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import sympy.physics.mechanics.loads as module_0
import sympy.physics.vector.vector as module_1
import sympy.physics.vector.point as module_2


def test_case_0():
    bytes_0 = b"JG]\xad\xf1?`\xa9Qh\xd1w\xfa\xb3hL\xb5\xc1\xfe\xee"
    torque_0 = module_0.gravity(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    module_0.LoadBase()


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_0.Force(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_0.Torque(*list_0)


def test_case_4():
    bytes_0 = b"\xd0C\x92\xb8\xc0N\x19\x82\xf3\xd2\x82\x1f\xac\x1b>\xff\t5"
    with pytest.raises(TypeError):
        module_0.gravity(bytes_0, *bytes_0)


def test_case_5():
    dict_0 = {}
    var_0 = module_1.Vector(dict_0)
    point_0 = module_2.Point(dict_0)
    list_0 = [point_0, var_0]
    force_0 = module_0.Force(*list_0)
    assert (
        f"{type(force_0).__module__}.{type(force_0).__qualname__}"
        == "sympy.physics.mechanics.loads.Force"
    )
    assert len(force_0) == 2
    assert (
        f"{type(module_0.Force.point).__module__}.{type(module_0.Force.point).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Force.force).__module__}.{type(module_0.Force.force).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    with pytest.raises(TypeError):
        force_0.__add__(none_type_0)


def test_case_6():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    load_base_0 = module_0.LoadBase(*list_0)
    none_type_0 = None
    with pytest.raises(TypeError):
        load_base_0.__mul__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    dict_0 = {}
    point_0 = module_2.Point(dict_0)
    list_0 = [point_0, dict_0]
    module_0.Force(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    dict_0 = {}
    vector_0 = module_1.Vector(dict_0)
    point_0 = module_2.Point(dict_0)
    list_0 = [point_0, vector_0]
    force_0 = module_0.Force(*list_0)
    assert (
        f"{type(force_0).__module__}.{type(force_0).__qualname__}"
        == "sympy.physics.mechanics.loads.Force"
    )
    assert len(force_0) == 2
    assert (
        f"{type(module_0.Force.point).__module__}.{type(module_0.Force.point).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Force.force).__module__}.{type(module_0.Force.force).__qualname__}"
        == "builtins.property"
    )
    module_0.Torque(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    dict_0 = {}
    vector_0 = module_1.Vector(dict_0)
    none_type_0 = None
    point_0 = module_2.Point(none_type_0)
    list_0 = [point_0, vector_0]
    force_0 = module_0.Force(*list_0)
    assert (
        f"{type(force_0).__module__}.{type(force_0).__qualname__}"
        == "sympy.physics.mechanics.loads.Force"
    )
    assert len(force_0) == 2
    assert (
        f"{type(module_0.Force.point).__module__}.{type(module_0.Force.point).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Force.force).__module__}.{type(module_0.Force.force).__qualname__}"
        == "builtins.property"
    )
    force_0.__repr__()
