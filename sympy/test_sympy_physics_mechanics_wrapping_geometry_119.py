# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import sympy.physics.mechanics.wrapping_geometry as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    none_type_0 = None
    wrapping_sphere_0 = module_0.WrappingSphere(none_type_0, none_type_0)
    assert (
        f"{type(wrapping_sphere_0).__module__}.{type(wrapping_sphere_0).__qualname__}"
        == "sympy.physics.mechanics.wrapping_geometry.WrappingSphere"
    )
    assert (
        f"{type(module_0.WrappingSphere.radius).__module__}.{type(module_0.WrappingSphere.radius).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappingSphere.point).__module__}.{type(module_0.WrappingSphere.point).__qualname__}"
        == "builtins.property"
    )
    wrapping_sphere_0.geodesic_length(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b'B\xe8\xfe\x18\xb7=\x80<@\xa0\xe6\xfb\xd5\xc9\x8bh"i\xcac'
    module_0.WrappingCylinder(bytes_0, bytes_0, bytes_0)


def test_case_2():
    none_type_0 = None
    wrapping_sphere_0 = module_0.WrappingSphere(none_type_0, none_type_0)
    assert (
        f"{type(wrapping_sphere_0).__module__}.{type(wrapping_sphere_0).__qualname__}"
        == "sympy.physics.mechanics.wrapping_geometry.WrappingSphere"
    )
    assert (
        f"{type(module_0.WrappingSphere.radius).__module__}.{type(module_0.WrappingSphere.radius).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappingSphere.point).__module__}.{type(module_0.WrappingSphere.point).__qualname__}"
        == "builtins.property"
    )


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    wrapping_sphere_0 = module_0.WrappingSphere(none_type_0, none_type_0)
    assert (
        f"{type(wrapping_sphere_0).__module__}.{type(wrapping_sphere_0).__qualname__}"
        == "sympy.physics.mechanics.wrapping_geometry.WrappingSphere"
    )
    assert (
        f"{type(module_0.WrappingSphere.radius).__module__}.{type(module_0.WrappingSphere.radius).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WrappingSphere.point).__module__}.{type(module_0.WrappingSphere.point).__qualname__}"
        == "builtins.property"
    )
    var_0 = wrapping_sphere_0.__repr__()
    assert var_0 == "WrappingSphere(radius=None, point=None)"
    wrapping_sphere_0.geodesic_length(wrapping_sphere_0, none_type_0)
