# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import sympy.physics.mechanics.pathway as module_0
import sympy.physics.vector.point as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    module_0.LinearPathway()


@pytest.mark.xfail(strict=True)
def test_case_1():
    module_0.ObstacleSetPathway()


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = -89
    module_0.WrappingPathway(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "OENMAOP7d"
    module_0.ObstacleSetPathway(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = -89
    point_0 = module_1.Point(int_0)
    module_0.WrappingPathway(point_0, point_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    point_0 = module_1.Point(none_type_0)
    list_0 = [point_0, point_0]
    linear_pathway_0 = module_0.LinearPathway(*list_0)
    assert (
        f"{type(linear_pathway_0).__module__}.{type(linear_pathway_0).__qualname__}"
        == "sympy.physics.mechanics.pathway.LinearPathway"
    )
    assert (
        f"{type(module_0.LinearPathway.length).__module__}.{type(module_0.LinearPathway.length).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.LinearPathway.extension_velocity).__module__}.{type(module_0.LinearPathway.extension_velocity).__qualname__}"
        == "builtins.property"
    )
    module_0.WrappingPathway(linear_pathway_0, none_type_0, point_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    point_0 = module_1.Point(none_type_0)
    list_0 = [point_0, point_0]
    linear_pathway_0 = module_0.LinearPathway(*list_0)
    assert (
        f"{type(linear_pathway_0).__module__}.{type(linear_pathway_0).__qualname__}"
        == "sympy.physics.mechanics.pathway.LinearPathway"
    )
    assert (
        f"{type(module_0.LinearPathway.length).__module__}.{type(module_0.LinearPathway.length).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.LinearPathway.extension_velocity).__module__}.{type(module_0.LinearPathway.extension_velocity).__qualname__}"
        == "builtins.property"
    )
    bool_0 = False
    var_0 = linear_pathway_0.to_loads(bool_0)
    module_0.ObstacleSetPathway(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    none_type_0 = None
    point_0 = module_1.Point(none_type_0)
    list_0 = [point_0, point_0, point_0]
    obstacle_set_pathway_0 = module_0.ObstacleSetPathway(*list_0)
    assert (
        f"{type(obstacle_set_pathway_0).__module__}.{type(obstacle_set_pathway_0).__qualname__}"
        == "sympy.physics.mechanics.pathway.ObstacleSetPathway"
    )
    assert (
        f"{type(module_0.ObstacleSetPathway.attachments).__module__}.{type(module_0.ObstacleSetPathway.attachments).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.ObstacleSetPathway.length).__module__}.{type(module_0.ObstacleSetPathway.length).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.ObstacleSetPathway.extension_velocity).__module__}.{type(module_0.ObstacleSetPathway.extension_velocity).__qualname__}"
        == "builtins.property"
    )
    obstacle_set_pathway_0.to_loads(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    int_0 = -602
    point_0 = module_1.Point(int_0)
    list_0 = [point_0, int_0, int_0]
    module_0.ObstacleSetPathway(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    none_type_0 = None
    point_0 = module_1.Point(none_type_0)
    list_0 = [point_0, point_0, point_0]
    obstacle_set_pathway_0 = module_0.ObstacleSetPathway(*list_0)
    assert (
        f"{type(obstacle_set_pathway_0).__module__}.{type(obstacle_set_pathway_0).__qualname__}"
        == "sympy.physics.mechanics.pathway.ObstacleSetPathway"
    )
    assert (
        f"{type(module_0.ObstacleSetPathway.attachments).__module__}.{type(module_0.ObstacleSetPathway.attachments).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.ObstacleSetPathway.length).__module__}.{type(module_0.ObstacleSetPathway.length).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.ObstacleSetPathway.extension_velocity).__module__}.{type(module_0.ObstacleSetPathway.extension_velocity).__qualname__}"
        == "builtins.property"
    )
    module_0.WrappingPathway(obstacle_set_pathway_0, point_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    none_type_0 = None
    point_0 = module_1.Point(none_type_0)
    list_0 = [point_0, point_0, point_0]
    obstacle_set_pathway_0 = module_0.ObstacleSetPathway(*list_0)
    assert (
        f"{type(obstacle_set_pathway_0).__module__}.{type(obstacle_set_pathway_0).__qualname__}"
        == "sympy.physics.mechanics.pathway.ObstacleSetPathway"
    )
    assert (
        f"{type(module_0.ObstacleSetPathway.attachments).__module__}.{type(module_0.ObstacleSetPathway.attachments).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.ObstacleSetPathway.length).__module__}.{type(module_0.ObstacleSetPathway.length).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.ObstacleSetPathway.extension_velocity).__module__}.{type(module_0.ObstacleSetPathway.extension_velocity).__qualname__}"
        == "builtins.property"
    )
    bool_0 = True
    var_0 = obstacle_set_pathway_0.to_loads(bool_0)
    point_0.pos_from(obstacle_set_pathway_0)
