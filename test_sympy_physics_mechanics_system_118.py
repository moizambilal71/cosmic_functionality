# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import sympy.physics.mechanics.system as module_0


def test_case_0():
    system_0 = module_0.System()
    assert (
        f"{type(system_0).__module__}.{type(system_0).__qualname__}"
        == "sympy.physics.mechanics.system.System"
    )
    assert (
        f"{type(module_0.System.from_newtonian).__module__}.{type(module_0.System.from_newtonian).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.System.fixed_point).__module__}.{type(module_0.System.fixed_point).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.frame).__module__}.{type(module_0.System.frame).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.x).__module__}.{type(module_0.System.x).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.y).__module__}.{type(module_0.System.y).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.z).__module__}.{type(module_0.System.z).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.bodies).__module__}.{type(module_0.System.bodies).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.joints).__module__}.{type(module_0.System.joints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.loads).__module__}.{type(module_0.System.loads).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.actuators).__module__}.{type(module_0.System.actuators).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q).__module__}.{type(module_0.System.q).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u).__module__}.{type(module_0.System.u).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q_ind).__module__}.{type(module_0.System.q_ind).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q_dep).__module__}.{type(module_0.System.q_dep).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_ind).__module__}.{type(module_0.System.u_ind).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_dep).__module__}.{type(module_0.System.u_dep).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_aux).__module__}.{type(module_0.System.u_aux).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.kdes).__module__}.{type(module_0.System.kdes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.holonomic_constraints).__module__}.{type(module_0.System.holonomic_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.nonholonomic_constraints).__module__}.{type(module_0.System.nonholonomic_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.velocity_constraints).__module__}.{type(module_0.System.velocity_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.eom_method).__module__}.{type(module_0.System.eom_method).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.mass_matrix).__module__}.{type(module_0.System.mass_matrix).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.mass_matrix_full).__module__}.{type(module_0.System.mass_matrix_full).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.forcing).__module__}.{type(module_0.System.forcing).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.forcing_full).__module__}.{type(module_0.System.forcing_full).__qualname__}"
        == "builtins.property"
    )


def test_case_1():
    system_0 = module_0.System()
    assert (
        f"{type(system_0).__module__}.{type(system_0).__qualname__}"
        == "sympy.physics.mechanics.system.System"
    )
    assert (
        f"{type(module_0.System.from_newtonian).__module__}.{type(module_0.System.from_newtonian).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.System.fixed_point).__module__}.{type(module_0.System.fixed_point).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.frame).__module__}.{type(module_0.System.frame).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.x).__module__}.{type(module_0.System.x).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.y).__module__}.{type(module_0.System.y).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.z).__module__}.{type(module_0.System.z).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.bodies).__module__}.{type(module_0.System.bodies).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.joints).__module__}.{type(module_0.System.joints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.loads).__module__}.{type(module_0.System.loads).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.actuators).__module__}.{type(module_0.System.actuators).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q).__module__}.{type(module_0.System.q).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u).__module__}.{type(module_0.System.u).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q_ind).__module__}.{type(module_0.System.q_ind).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q_dep).__module__}.{type(module_0.System.q_dep).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_ind).__module__}.{type(module_0.System.u_ind).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_dep).__module__}.{type(module_0.System.u_dep).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_aux).__module__}.{type(module_0.System.u_aux).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.kdes).__module__}.{type(module_0.System.kdes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.holonomic_constraints).__module__}.{type(module_0.System.holonomic_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.nonholonomic_constraints).__module__}.{type(module_0.System.nonholonomic_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.velocity_constraints).__module__}.{type(module_0.System.velocity_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.eom_method).__module__}.{type(module_0.System.eom_method).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.mass_matrix).__module__}.{type(module_0.System.mass_matrix).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.mass_matrix_full).__module__}.{type(module_0.System.mass_matrix_full).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.forcing).__module__}.{type(module_0.System.forcing).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.forcing_full).__module__}.{type(module_0.System.forcing_full).__qualname__}"
        == "builtins.property"
    )
    var_0 = system_0.validate_system()


def test_case_2():
    system_0 = module_0.System()
    assert (
        f"{type(system_0).__module__}.{type(system_0).__qualname__}"
        == "sympy.physics.mechanics.system.System"
    )
    assert (
        f"{type(module_0.System.from_newtonian).__module__}.{type(module_0.System.from_newtonian).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.System.fixed_point).__module__}.{type(module_0.System.fixed_point).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.frame).__module__}.{type(module_0.System.frame).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.x).__module__}.{type(module_0.System.x).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.y).__module__}.{type(module_0.System.y).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.z).__module__}.{type(module_0.System.z).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.bodies).__module__}.{type(module_0.System.bodies).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.joints).__module__}.{type(module_0.System.joints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.loads).__module__}.{type(module_0.System.loads).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.actuators).__module__}.{type(module_0.System.actuators).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q).__module__}.{type(module_0.System.q).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u).__module__}.{type(module_0.System.u).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q_ind).__module__}.{type(module_0.System.q_ind).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q_dep).__module__}.{type(module_0.System.q_dep).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_ind).__module__}.{type(module_0.System.u_ind).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_dep).__module__}.{type(module_0.System.u_dep).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_aux).__module__}.{type(module_0.System.u_aux).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.kdes).__module__}.{type(module_0.System.kdes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.holonomic_constraints).__module__}.{type(module_0.System.holonomic_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.nonholonomic_constraints).__module__}.{type(module_0.System.nonholonomic_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.velocity_constraints).__module__}.{type(module_0.System.velocity_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.eom_method).__module__}.{type(module_0.System.eom_method).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.mass_matrix).__module__}.{type(module_0.System.mass_matrix).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.mass_matrix_full).__module__}.{type(module_0.System.mass_matrix_full).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.forcing).__module__}.{type(module_0.System.forcing).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.forcing_full).__module__}.{type(module_0.System.forcing_full).__qualname__}"
        == "builtins.property"
    )
    var_0 = system_0.add_nonholonomic_constraints()


def test_case_3():
    system_0 = module_0.System()
    assert (
        f"{type(system_0).__module__}.{type(system_0).__qualname__}"
        == "sympy.physics.mechanics.system.System"
    )
    assert (
        f"{type(module_0.System.from_newtonian).__module__}.{type(module_0.System.from_newtonian).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.System.fixed_point).__module__}.{type(module_0.System.fixed_point).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.frame).__module__}.{type(module_0.System.frame).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.x).__module__}.{type(module_0.System.x).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.y).__module__}.{type(module_0.System.y).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.z).__module__}.{type(module_0.System.z).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.bodies).__module__}.{type(module_0.System.bodies).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.joints).__module__}.{type(module_0.System.joints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.loads).__module__}.{type(module_0.System.loads).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.actuators).__module__}.{type(module_0.System.actuators).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q).__module__}.{type(module_0.System.q).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u).__module__}.{type(module_0.System.u).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q_ind).__module__}.{type(module_0.System.q_ind).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q_dep).__module__}.{type(module_0.System.q_dep).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_ind).__module__}.{type(module_0.System.u_ind).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_dep).__module__}.{type(module_0.System.u_dep).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_aux).__module__}.{type(module_0.System.u_aux).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.kdes).__module__}.{type(module_0.System.kdes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.holonomic_constraints).__module__}.{type(module_0.System.holonomic_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.nonholonomic_constraints).__module__}.{type(module_0.System.nonholonomic_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.velocity_constraints).__module__}.{type(module_0.System.velocity_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.eom_method).__module__}.{type(module_0.System.eom_method).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.mass_matrix).__module__}.{type(module_0.System.mass_matrix).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.mass_matrix_full).__module__}.{type(module_0.System.mass_matrix_full).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.forcing).__module__}.{type(module_0.System.forcing).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.forcing_full).__module__}.{type(module_0.System.forcing_full).__qualname__}"
        == "builtins.property"
    )
    var_0 = system_0.get_body(system_0)


def test_case_4():
    system_0 = module_0.System()
    assert (
        f"{type(system_0).__module__}.{type(system_0).__qualname__}"
        == "sympy.physics.mechanics.system.System"
    )
    assert (
        f"{type(module_0.System.from_newtonian).__module__}.{type(module_0.System.from_newtonian).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.System.fixed_point).__module__}.{type(module_0.System.fixed_point).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.frame).__module__}.{type(module_0.System.frame).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.x).__module__}.{type(module_0.System.x).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.y).__module__}.{type(module_0.System.y).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.z).__module__}.{type(module_0.System.z).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.bodies).__module__}.{type(module_0.System.bodies).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.joints).__module__}.{type(module_0.System.joints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.loads).__module__}.{type(module_0.System.loads).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.actuators).__module__}.{type(module_0.System.actuators).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q).__module__}.{type(module_0.System.q).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u).__module__}.{type(module_0.System.u).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q_ind).__module__}.{type(module_0.System.q_ind).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q_dep).__module__}.{type(module_0.System.q_dep).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_ind).__module__}.{type(module_0.System.u_ind).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_dep).__module__}.{type(module_0.System.u_dep).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_aux).__module__}.{type(module_0.System.u_aux).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.kdes).__module__}.{type(module_0.System.kdes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.holonomic_constraints).__module__}.{type(module_0.System.holonomic_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.nonholonomic_constraints).__module__}.{type(module_0.System.nonholonomic_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.velocity_constraints).__module__}.{type(module_0.System.velocity_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.eom_method).__module__}.{type(module_0.System.eom_method).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.mass_matrix).__module__}.{type(module_0.System.mass_matrix).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.mass_matrix_full).__module__}.{type(module_0.System.mass_matrix_full).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.forcing).__module__}.{type(module_0.System.forcing).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.forcing_full).__module__}.{type(module_0.System.forcing_full).__qualname__}"
        == "builtins.property"
    )
    var_0 = system_0.get_joint(system_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    system_0 = module_0.System()
    assert (
        f"{type(system_0).__module__}.{type(system_0).__qualname__}"
        == "sympy.physics.mechanics.system.System"
    )
    assert (
        f"{type(module_0.System.from_newtonian).__module__}.{type(module_0.System.from_newtonian).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.System.fixed_point).__module__}.{type(module_0.System.fixed_point).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.frame).__module__}.{type(module_0.System.frame).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.x).__module__}.{type(module_0.System.x).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.y).__module__}.{type(module_0.System.y).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.z).__module__}.{type(module_0.System.z).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.bodies).__module__}.{type(module_0.System.bodies).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.joints).__module__}.{type(module_0.System.joints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.loads).__module__}.{type(module_0.System.loads).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.actuators).__module__}.{type(module_0.System.actuators).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q).__module__}.{type(module_0.System.q).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u).__module__}.{type(module_0.System.u).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q_ind).__module__}.{type(module_0.System.q_ind).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q_dep).__module__}.{type(module_0.System.q_dep).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_ind).__module__}.{type(module_0.System.u_ind).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_dep).__module__}.{type(module_0.System.u_dep).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_aux).__module__}.{type(module_0.System.u_aux).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.kdes).__module__}.{type(module_0.System.kdes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.holonomic_constraints).__module__}.{type(module_0.System.holonomic_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.nonholonomic_constraints).__module__}.{type(module_0.System.nonholonomic_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.velocity_constraints).__module__}.{type(module_0.System.velocity_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.eom_method).__module__}.{type(module_0.System.eom_method).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.mass_matrix).__module__}.{type(module_0.System.mass_matrix).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.mass_matrix_full).__module__}.{type(module_0.System.mass_matrix_full).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.forcing).__module__}.{type(module_0.System.forcing).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.forcing_full).__module__}.{type(module_0.System.forcing_full).__qualname__}"
        == "builtins.property"
    )
    system_0.form_eoms()


@pytest.mark.xfail(strict=True)
def test_case_6():
    system_0 = module_0.System()
    assert (
        f"{type(system_0).__module__}.{type(system_0).__qualname__}"
        == "sympy.physics.mechanics.system.System"
    )
    assert (
        f"{type(module_0.System.from_newtonian).__module__}.{type(module_0.System.from_newtonian).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.System.fixed_point).__module__}.{type(module_0.System.fixed_point).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.frame).__module__}.{type(module_0.System.frame).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.x).__module__}.{type(module_0.System.x).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.y).__module__}.{type(module_0.System.y).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.z).__module__}.{type(module_0.System.z).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.bodies).__module__}.{type(module_0.System.bodies).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.joints).__module__}.{type(module_0.System.joints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.loads).__module__}.{type(module_0.System.loads).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.actuators).__module__}.{type(module_0.System.actuators).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q).__module__}.{type(module_0.System.q).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u).__module__}.{type(module_0.System.u).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q_ind).__module__}.{type(module_0.System.q_ind).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q_dep).__module__}.{type(module_0.System.q_dep).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_ind).__module__}.{type(module_0.System.u_ind).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_dep).__module__}.{type(module_0.System.u_dep).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_aux).__module__}.{type(module_0.System.u_aux).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.kdes).__module__}.{type(module_0.System.kdes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.holonomic_constraints).__module__}.{type(module_0.System.holonomic_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.nonholonomic_constraints).__module__}.{type(module_0.System.nonholonomic_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.velocity_constraints).__module__}.{type(module_0.System.velocity_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.eom_method).__module__}.{type(module_0.System.eom_method).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.mass_matrix).__module__}.{type(module_0.System.mass_matrix).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.mass_matrix_full).__module__}.{type(module_0.System.mass_matrix_full).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.forcing).__module__}.{type(module_0.System.forcing).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.forcing_full).__module__}.{type(module_0.System.forcing_full).__qualname__}"
        == "builtins.property"
    )
    system_0.form_eoms(system_0)


def test_case_7():
    tuple_0 = ()
    symbolic_system_0 = module_0.SymbolicSystem(tuple_0, tuple_0)
    assert (
        f"{type(symbolic_system_0).__module__}.{type(symbolic_system_0).__qualname__}"
        == "sympy.physics.mechanics.system.SymbolicSystem"
    )
    assert symbolic_system_0.output_eqns == {}
    assert (
        f"{type(module_0.SymbolicSystem.coordinates).__module__}.{type(module_0.SymbolicSystem.coordinates).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.speeds).__module__}.{type(module_0.SymbolicSystem.speeds).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.states).__module__}.{type(module_0.SymbolicSystem.states).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.alg_con).__module__}.{type(module_0.SymbolicSystem.alg_con).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.dyn_implicit_mat).__module__}.{type(module_0.SymbolicSystem.dyn_implicit_mat).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.dyn_implicit_rhs).__module__}.{type(module_0.SymbolicSystem.dyn_implicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_implicit_mat).__module__}.{type(module_0.SymbolicSystem.comb_implicit_mat).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_implicit_rhs).__module__}.{type(module_0.SymbolicSystem.comb_implicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_explicit_rhs).__module__}.{type(module_0.SymbolicSystem.comb_explicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.kin_explicit_rhs).__module__}.{type(module_0.SymbolicSystem.kin_explicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.bodies).__module__}.{type(module_0.SymbolicSystem.bodies).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.loads).__module__}.{type(module_0.SymbolicSystem.loads).__qualname__}"
        == "builtins.property"
    )


def test_case_8():
    bytes_0 = b"\x1c\x87\x15\xd0\xf6\x9d\xdf\xc4\x83D\xd0?\x1drD\xe8"
    symbolic_system_0 = module_0.SymbolicSystem(bytes_0, bytes_0, bytes_0, bytes_0)
    assert (
        f"{type(symbolic_system_0).__module__}.{type(symbolic_system_0).__qualname__}"
        == "sympy.physics.mechanics.system.SymbolicSystem"
    )
    assert symbolic_system_0.output_eqns == {}
    assert (
        f"{type(module_0.SymbolicSystem.coordinates).__module__}.{type(module_0.SymbolicSystem.coordinates).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.speeds).__module__}.{type(module_0.SymbolicSystem.speeds).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.states).__module__}.{type(module_0.SymbolicSystem.states).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.alg_con).__module__}.{type(module_0.SymbolicSystem.alg_con).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.dyn_implicit_mat).__module__}.{type(module_0.SymbolicSystem.dyn_implicit_mat).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.dyn_implicit_rhs).__module__}.{type(module_0.SymbolicSystem.dyn_implicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_implicit_mat).__module__}.{type(module_0.SymbolicSystem.comb_implicit_mat).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_implicit_rhs).__module__}.{type(module_0.SymbolicSystem.comb_implicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_explicit_rhs).__module__}.{type(module_0.SymbolicSystem.comb_explicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.kin_explicit_rhs).__module__}.{type(module_0.SymbolicSystem.kin_explicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.bodies).__module__}.{type(module_0.SymbolicSystem.bodies).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.loads).__module__}.{type(module_0.SymbolicSystem.loads).__qualname__}"
        == "builtins.property"
    )


def test_case_9():
    system_0 = module_0.System()
    assert (
        f"{type(system_0).__module__}.{type(system_0).__qualname__}"
        == "sympy.physics.mechanics.system.System"
    )
    assert (
        f"{type(module_0.System.from_newtonian).__module__}.{type(module_0.System.from_newtonian).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.System.fixed_point).__module__}.{type(module_0.System.fixed_point).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.frame).__module__}.{type(module_0.System.frame).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.x).__module__}.{type(module_0.System.x).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.y).__module__}.{type(module_0.System.y).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.z).__module__}.{type(module_0.System.z).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.bodies).__module__}.{type(module_0.System.bodies).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.joints).__module__}.{type(module_0.System.joints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.loads).__module__}.{type(module_0.System.loads).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.actuators).__module__}.{type(module_0.System.actuators).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q).__module__}.{type(module_0.System.q).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u).__module__}.{type(module_0.System.u).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q_ind).__module__}.{type(module_0.System.q_ind).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q_dep).__module__}.{type(module_0.System.q_dep).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_ind).__module__}.{type(module_0.System.u_ind).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_dep).__module__}.{type(module_0.System.u_dep).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_aux).__module__}.{type(module_0.System.u_aux).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.kdes).__module__}.{type(module_0.System.kdes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.holonomic_constraints).__module__}.{type(module_0.System.holonomic_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.nonholonomic_constraints).__module__}.{type(module_0.System.nonholonomic_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.velocity_constraints).__module__}.{type(module_0.System.velocity_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.eom_method).__module__}.{type(module_0.System.eom_method).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.mass_matrix).__module__}.{type(module_0.System.mass_matrix).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.mass_matrix_full).__module__}.{type(module_0.System.mass_matrix_full).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.forcing).__module__}.{type(module_0.System.forcing).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.forcing_full).__module__}.{type(module_0.System.forcing_full).__qualname__}"
        == "builtins.property"
    )
    var_0 = system_0.validate_system(check_duplicates=system_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    system_0 = module_0.System()
    assert (
        f"{type(system_0).__module__}.{type(system_0).__qualname__}"
        == "sympy.physics.mechanics.system.System"
    )
    assert (
        f"{type(module_0.System.from_newtonian).__module__}.{type(module_0.System.from_newtonian).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.System.fixed_point).__module__}.{type(module_0.System.fixed_point).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.frame).__module__}.{type(module_0.System.frame).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.x).__module__}.{type(module_0.System.x).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.y).__module__}.{type(module_0.System.y).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.z).__module__}.{type(module_0.System.z).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.bodies).__module__}.{type(module_0.System.bodies).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.joints).__module__}.{type(module_0.System.joints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.loads).__module__}.{type(module_0.System.loads).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.actuators).__module__}.{type(module_0.System.actuators).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q).__module__}.{type(module_0.System.q).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u).__module__}.{type(module_0.System.u).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q_ind).__module__}.{type(module_0.System.q_ind).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q_dep).__module__}.{type(module_0.System.q_dep).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_ind).__module__}.{type(module_0.System.u_ind).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_dep).__module__}.{type(module_0.System.u_dep).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_aux).__module__}.{type(module_0.System.u_aux).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.kdes).__module__}.{type(module_0.System.kdes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.holonomic_constraints).__module__}.{type(module_0.System.holonomic_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.nonholonomic_constraints).__module__}.{type(module_0.System.nonholonomic_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.velocity_constraints).__module__}.{type(module_0.System.velocity_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.eom_method).__module__}.{type(module_0.System.eom_method).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.mass_matrix).__module__}.{type(module_0.System.mass_matrix).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.mass_matrix_full).__module__}.{type(module_0.System.mass_matrix_full).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.forcing).__module__}.{type(module_0.System.forcing).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.forcing_full).__module__}.{type(module_0.System.forcing_full).__qualname__}"
        == "builtins.property"
    )
    var_0 = system_0.get_joint(system_0)
    system_0.forcing_full()


def test_case_11():
    system_0 = module_0.System()
    assert (
        f"{type(system_0).__module__}.{type(system_0).__qualname__}"
        == "sympy.physics.mechanics.system.System"
    )
    assert (
        f"{type(module_0.System.from_newtonian).__module__}.{type(module_0.System.from_newtonian).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.System.fixed_point).__module__}.{type(module_0.System.fixed_point).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.frame).__module__}.{type(module_0.System.frame).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.x).__module__}.{type(module_0.System.x).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.y).__module__}.{type(module_0.System.y).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.z).__module__}.{type(module_0.System.z).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.bodies).__module__}.{type(module_0.System.bodies).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.joints).__module__}.{type(module_0.System.joints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.loads).__module__}.{type(module_0.System.loads).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.actuators).__module__}.{type(module_0.System.actuators).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q).__module__}.{type(module_0.System.q).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u).__module__}.{type(module_0.System.u).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q_ind).__module__}.{type(module_0.System.q_ind).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q_dep).__module__}.{type(module_0.System.q_dep).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_ind).__module__}.{type(module_0.System.u_ind).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_dep).__module__}.{type(module_0.System.u_dep).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_aux).__module__}.{type(module_0.System.u_aux).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.kdes).__module__}.{type(module_0.System.kdes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.holonomic_constraints).__module__}.{type(module_0.System.holonomic_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.nonholonomic_constraints).__module__}.{type(module_0.System.nonholonomic_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.velocity_constraints).__module__}.{type(module_0.System.velocity_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.eom_method).__module__}.{type(module_0.System.eom_method).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.mass_matrix).__module__}.{type(module_0.System.mass_matrix).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.mass_matrix_full).__module__}.{type(module_0.System.mass_matrix_full).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.forcing).__module__}.{type(module_0.System.forcing).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.forcing_full).__module__}.{type(module_0.System.forcing_full).__qualname__}"
        == "builtins.property"
    )
    var_0 = system_0.add_holonomic_constraints()


@pytest.mark.xfail(strict=True)
def test_case_12():
    system_0 = module_0.System()
    assert (
        f"{type(system_0).__module__}.{type(system_0).__qualname__}"
        == "sympy.physics.mechanics.system.System"
    )
    assert (
        f"{type(module_0.System.from_newtonian).__module__}.{type(module_0.System.from_newtonian).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.System.fixed_point).__module__}.{type(module_0.System.fixed_point).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.frame).__module__}.{type(module_0.System.frame).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.x).__module__}.{type(module_0.System.x).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.y).__module__}.{type(module_0.System.y).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.z).__module__}.{type(module_0.System.z).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.bodies).__module__}.{type(module_0.System.bodies).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.joints).__module__}.{type(module_0.System.joints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.loads).__module__}.{type(module_0.System.loads).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.actuators).__module__}.{type(module_0.System.actuators).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q).__module__}.{type(module_0.System.q).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u).__module__}.{type(module_0.System.u).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q_ind).__module__}.{type(module_0.System.q_ind).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q_dep).__module__}.{type(module_0.System.q_dep).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_ind).__module__}.{type(module_0.System.u_ind).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_dep).__module__}.{type(module_0.System.u_dep).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_aux).__module__}.{type(module_0.System.u_aux).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.kdes).__module__}.{type(module_0.System.kdes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.holonomic_constraints).__module__}.{type(module_0.System.holonomic_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.nonholonomic_constraints).__module__}.{type(module_0.System.nonholonomic_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.velocity_constraints).__module__}.{type(module_0.System.velocity_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.eom_method).__module__}.{type(module_0.System.eom_method).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.mass_matrix).__module__}.{type(module_0.System.mass_matrix).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.mass_matrix_full).__module__}.{type(module_0.System.mass_matrix_full).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.forcing).__module__}.{type(module_0.System.forcing).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.forcing_full).__module__}.{type(module_0.System.forcing_full).__qualname__}"
        == "builtins.property"
    )
    var_0 = system_0.add_loads()
    system_0.rhs()


def test_case_13():
    bytes_0 = b"\x1c\x87\x15\xd0\xf6\x9d\xdf\xc4\x83D\xd0?\x1drD\xe8"
    with pytest.raises(TypeError):
        module_0.System(fixed_point=bytes_0)


def test_case_14():
    system_0 = module_0.System()
    assert (
        f"{type(system_0).__module__}.{type(system_0).__qualname__}"
        == "sympy.physics.mechanics.system.System"
    )
    assert (
        f"{type(module_0.System.from_newtonian).__module__}.{type(module_0.System.from_newtonian).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.System.fixed_point).__module__}.{type(module_0.System.fixed_point).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.frame).__module__}.{type(module_0.System.frame).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.x).__module__}.{type(module_0.System.x).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.y).__module__}.{type(module_0.System.y).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.z).__module__}.{type(module_0.System.z).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.bodies).__module__}.{type(module_0.System.bodies).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.joints).__module__}.{type(module_0.System.joints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.loads).__module__}.{type(module_0.System.loads).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.actuators).__module__}.{type(module_0.System.actuators).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q).__module__}.{type(module_0.System.q).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u).__module__}.{type(module_0.System.u).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q_ind).__module__}.{type(module_0.System.q_ind).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q_dep).__module__}.{type(module_0.System.q_dep).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_ind).__module__}.{type(module_0.System.u_ind).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_dep).__module__}.{type(module_0.System.u_dep).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_aux).__module__}.{type(module_0.System.u_aux).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.kdes).__module__}.{type(module_0.System.kdes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.holonomic_constraints).__module__}.{type(module_0.System.holonomic_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.nonholonomic_constraints).__module__}.{type(module_0.System.nonholonomic_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.velocity_constraints).__module__}.{type(module_0.System.velocity_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.eom_method).__module__}.{type(module_0.System.eom_method).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.mass_matrix).__module__}.{type(module_0.System.mass_matrix).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.mass_matrix_full).__module__}.{type(module_0.System.mass_matrix_full).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.forcing).__module__}.{type(module_0.System.forcing).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.forcing_full).__module__}.{type(module_0.System.forcing_full).__qualname__}"
        == "builtins.property"
    )
    var_0 = system_0.add_joints()


@pytest.mark.xfail(strict=True)
def test_case_15():
    system_0 = module_0.System()
    assert (
        f"{type(system_0).__module__}.{type(system_0).__qualname__}"
        == "sympy.physics.mechanics.system.System"
    )
    assert (
        f"{type(module_0.System.from_newtonian).__module__}.{type(module_0.System.from_newtonian).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.System.fixed_point).__module__}.{type(module_0.System.fixed_point).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.frame).__module__}.{type(module_0.System.frame).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.x).__module__}.{type(module_0.System.x).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.y).__module__}.{type(module_0.System.y).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.z).__module__}.{type(module_0.System.z).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.bodies).__module__}.{type(module_0.System.bodies).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.joints).__module__}.{type(module_0.System.joints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.loads).__module__}.{type(module_0.System.loads).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.actuators).__module__}.{type(module_0.System.actuators).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q).__module__}.{type(module_0.System.q).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u).__module__}.{type(module_0.System.u).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q_ind).__module__}.{type(module_0.System.q_ind).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q_dep).__module__}.{type(module_0.System.q_dep).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_ind).__module__}.{type(module_0.System.u_ind).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_dep).__module__}.{type(module_0.System.u_dep).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_aux).__module__}.{type(module_0.System.u_aux).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.kdes).__module__}.{type(module_0.System.kdes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.holonomic_constraints).__module__}.{type(module_0.System.holonomic_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.nonholonomic_constraints).__module__}.{type(module_0.System.nonholonomic_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.velocity_constraints).__module__}.{type(module_0.System.velocity_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.eom_method).__module__}.{type(module_0.System.eom_method).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.mass_matrix).__module__}.{type(module_0.System.mass_matrix).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.mass_matrix_full).__module__}.{type(module_0.System.mass_matrix_full).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.forcing).__module__}.{type(module_0.System.forcing).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.forcing_full).__module__}.{type(module_0.System.forcing_full).__qualname__}"
        == "builtins.property"
    )
    system_1 = module_0.System()
    var_0 = system_0.get_joint(system_0)
    var_1 = system_1.add_loads()
    var_2 = system_0.add_kdes()
    system_0.add_nonholonomic_constraints(*system_1)


def test_case_16():
    system_0 = module_0.System()
    assert (
        f"{type(system_0).__module__}.{type(system_0).__qualname__}"
        == "sympy.physics.mechanics.system.System"
    )
    assert (
        f"{type(module_0.System.from_newtonian).__module__}.{type(module_0.System.from_newtonian).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.System.fixed_point).__module__}.{type(module_0.System.fixed_point).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.frame).__module__}.{type(module_0.System.frame).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.x).__module__}.{type(module_0.System.x).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.y).__module__}.{type(module_0.System.y).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.z).__module__}.{type(module_0.System.z).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.bodies).__module__}.{type(module_0.System.bodies).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.joints).__module__}.{type(module_0.System.joints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.loads).__module__}.{type(module_0.System.loads).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.actuators).__module__}.{type(module_0.System.actuators).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q).__module__}.{type(module_0.System.q).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u).__module__}.{type(module_0.System.u).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q_ind).__module__}.{type(module_0.System.q_ind).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q_dep).__module__}.{type(module_0.System.q_dep).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_ind).__module__}.{type(module_0.System.u_ind).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_dep).__module__}.{type(module_0.System.u_dep).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_aux).__module__}.{type(module_0.System.u_aux).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.kdes).__module__}.{type(module_0.System.kdes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.holonomic_constraints).__module__}.{type(module_0.System.holonomic_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.nonholonomic_constraints).__module__}.{type(module_0.System.nonholonomic_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.velocity_constraints).__module__}.{type(module_0.System.velocity_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.eom_method).__module__}.{type(module_0.System.eom_method).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.mass_matrix).__module__}.{type(module_0.System.mass_matrix).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.mass_matrix_full).__module__}.{type(module_0.System.mass_matrix_full).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.forcing).__module__}.{type(module_0.System.forcing).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.forcing_full).__module__}.{type(module_0.System.forcing_full).__qualname__}"
        == "builtins.property"
    )
    var_0 = system_0.add_actuators()


def test_case_17():
    float_0 = -1890.3
    with pytest.raises(TypeError):
        module_0.System(float_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    system_0 = module_0.System()
    assert (
        f"{type(system_0).__module__}.{type(system_0).__qualname__}"
        == "sympy.physics.mechanics.system.System"
    )
    assert (
        f"{type(module_0.System.from_newtonian).__module__}.{type(module_0.System.from_newtonian).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.System.fixed_point).__module__}.{type(module_0.System.fixed_point).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.frame).__module__}.{type(module_0.System.frame).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.x).__module__}.{type(module_0.System.x).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.y).__module__}.{type(module_0.System.y).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.z).__module__}.{type(module_0.System.z).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.bodies).__module__}.{type(module_0.System.bodies).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.joints).__module__}.{type(module_0.System.joints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.loads).__module__}.{type(module_0.System.loads).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.actuators).__module__}.{type(module_0.System.actuators).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q).__module__}.{type(module_0.System.q).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u).__module__}.{type(module_0.System.u).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q_ind).__module__}.{type(module_0.System.q_ind).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q_dep).__module__}.{type(module_0.System.q_dep).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_ind).__module__}.{type(module_0.System.u_ind).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_dep).__module__}.{type(module_0.System.u_dep).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_aux).__module__}.{type(module_0.System.u_aux).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.kdes).__module__}.{type(module_0.System.kdes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.holonomic_constraints).__module__}.{type(module_0.System.holonomic_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.nonholonomic_constraints).__module__}.{type(module_0.System.nonholonomic_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.velocity_constraints).__module__}.{type(module_0.System.velocity_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.eom_method).__module__}.{type(module_0.System.eom_method).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.mass_matrix).__module__}.{type(module_0.System.mass_matrix).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.mass_matrix_full).__module__}.{type(module_0.System.mass_matrix_full).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.forcing).__module__}.{type(module_0.System.forcing).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.forcing_full).__module__}.{type(module_0.System.forcing_full).__qualname__}"
        == "builtins.property"
    )
    var_0 = system_0.get_body(system_0)
    system_0.mass_matrix_full()


def test_case_19():
    bytes_0 = b"\xba\xbft\xd4[l\xdc1\x8b\xd3"
    symbolic_system_0 = module_0.SymbolicSystem(bytes_0, bytes_0, bodies=bytes_0)
    assert (
        f"{type(symbolic_system_0).__module__}.{type(symbolic_system_0).__qualname__}"
        == "sympy.physics.mechanics.system.SymbolicSystem"
    )
    assert symbolic_system_0.output_eqns == {}
    assert (
        f"{type(module_0.SymbolicSystem.coordinates).__module__}.{type(module_0.SymbolicSystem.coordinates).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.speeds).__module__}.{type(module_0.SymbolicSystem.speeds).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.states).__module__}.{type(module_0.SymbolicSystem.states).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.alg_con).__module__}.{type(module_0.SymbolicSystem.alg_con).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.dyn_implicit_mat).__module__}.{type(module_0.SymbolicSystem.dyn_implicit_mat).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.dyn_implicit_rhs).__module__}.{type(module_0.SymbolicSystem.dyn_implicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_implicit_mat).__module__}.{type(module_0.SymbolicSystem.comb_implicit_mat).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_implicit_rhs).__module__}.{type(module_0.SymbolicSystem.comb_implicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_explicit_rhs).__module__}.{type(module_0.SymbolicSystem.comb_explicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.kin_explicit_rhs).__module__}.{type(module_0.SymbolicSystem.kin_explicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.bodies).__module__}.{type(module_0.SymbolicSystem.bodies).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.loads).__module__}.{type(module_0.SymbolicSystem.loads).__qualname__}"
        == "builtins.property"
    )


@pytest.mark.xfail(strict=True)
def test_case_20():
    system_0 = module_0.System()
    assert (
        f"{type(system_0).__module__}.{type(system_0).__qualname__}"
        == "sympy.physics.mechanics.system.System"
    )
    assert (
        f"{type(module_0.System.from_newtonian).__module__}.{type(module_0.System.from_newtonian).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.System.fixed_point).__module__}.{type(module_0.System.fixed_point).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.frame).__module__}.{type(module_0.System.frame).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.x).__module__}.{type(module_0.System.x).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.y).__module__}.{type(module_0.System.y).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.z).__module__}.{type(module_0.System.z).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.bodies).__module__}.{type(module_0.System.bodies).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.joints).__module__}.{type(module_0.System.joints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.loads).__module__}.{type(module_0.System.loads).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.actuators).__module__}.{type(module_0.System.actuators).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q).__module__}.{type(module_0.System.q).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u).__module__}.{type(module_0.System.u).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q_ind).__module__}.{type(module_0.System.q_ind).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q_dep).__module__}.{type(module_0.System.q_dep).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_ind).__module__}.{type(module_0.System.u_ind).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_dep).__module__}.{type(module_0.System.u_dep).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_aux).__module__}.{type(module_0.System.u_aux).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.kdes).__module__}.{type(module_0.System.kdes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.holonomic_constraints).__module__}.{type(module_0.System.holonomic_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.nonholonomic_constraints).__module__}.{type(module_0.System.nonholonomic_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.velocity_constraints).__module__}.{type(module_0.System.velocity_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.eom_method).__module__}.{type(module_0.System.eom_method).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.mass_matrix).__module__}.{type(module_0.System.mass_matrix).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.mass_matrix_full).__module__}.{type(module_0.System.mass_matrix_full).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.forcing).__module__}.{type(module_0.System.forcing).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.forcing_full).__module__}.{type(module_0.System.forcing_full).__qualname__}"
        == "builtins.property"
    )
    system_0.forcing()


@pytest.mark.xfail(strict=True)
def test_case_21():
    system_0 = module_0.System()
    assert (
        f"{type(system_0).__module__}.{type(system_0).__qualname__}"
        == "sympy.physics.mechanics.system.System"
    )
    assert (
        f"{type(module_0.System.from_newtonian).__module__}.{type(module_0.System.from_newtonian).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.System.fixed_point).__module__}.{type(module_0.System.fixed_point).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.frame).__module__}.{type(module_0.System.frame).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.x).__module__}.{type(module_0.System.x).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.y).__module__}.{type(module_0.System.y).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.z).__module__}.{type(module_0.System.z).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.bodies).__module__}.{type(module_0.System.bodies).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.joints).__module__}.{type(module_0.System.joints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.loads).__module__}.{type(module_0.System.loads).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.actuators).__module__}.{type(module_0.System.actuators).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q).__module__}.{type(module_0.System.q).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u).__module__}.{type(module_0.System.u).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q_ind).__module__}.{type(module_0.System.q_ind).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q_dep).__module__}.{type(module_0.System.q_dep).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_ind).__module__}.{type(module_0.System.u_ind).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_dep).__module__}.{type(module_0.System.u_dep).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_aux).__module__}.{type(module_0.System.u_aux).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.kdes).__module__}.{type(module_0.System.kdes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.holonomic_constraints).__module__}.{type(module_0.System.holonomic_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.nonholonomic_constraints).__module__}.{type(module_0.System.nonholonomic_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.velocity_constraints).__module__}.{type(module_0.System.velocity_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.eom_method).__module__}.{type(module_0.System.eom_method).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.mass_matrix).__module__}.{type(module_0.System.mass_matrix).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.mass_matrix_full).__module__}.{type(module_0.System.mass_matrix_full).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.forcing).__module__}.{type(module_0.System.forcing).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.forcing_full).__module__}.{type(module_0.System.forcing_full).__qualname__}"
        == "builtins.property"
    )
    list_0 = [system_0]
    system_0.add_bodies(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_22():
    bytes_0 = b"\x1c\x87\x15\xd0\xf6\x9d\xdf\xc4\x83D\xd0?\x1drD\xe8"
    symbolic_system_0 = module_0.SymbolicSystem(bytes_0, bytes_0, bytes_0, bytes_0)
    assert (
        f"{type(symbolic_system_0).__module__}.{type(symbolic_system_0).__qualname__}"
        == "sympy.physics.mechanics.system.SymbolicSystem"
    )
    assert symbolic_system_0.output_eqns == {}
    assert (
        f"{type(module_0.SymbolicSystem.coordinates).__module__}.{type(module_0.SymbolicSystem.coordinates).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.speeds).__module__}.{type(module_0.SymbolicSystem.speeds).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.states).__module__}.{type(module_0.SymbolicSystem.states).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.alg_con).__module__}.{type(module_0.SymbolicSystem.alg_con).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.dyn_implicit_mat).__module__}.{type(module_0.SymbolicSystem.dyn_implicit_mat).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.dyn_implicit_rhs).__module__}.{type(module_0.SymbolicSystem.dyn_implicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_implicit_mat).__module__}.{type(module_0.SymbolicSystem.comb_implicit_mat).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_implicit_rhs).__module__}.{type(module_0.SymbolicSystem.comb_implicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_explicit_rhs).__module__}.{type(module_0.SymbolicSystem.comb_explicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.kin_explicit_rhs).__module__}.{type(module_0.SymbolicSystem.kin_explicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.bodies).__module__}.{type(module_0.SymbolicSystem.bodies).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.loads).__module__}.{type(module_0.SymbolicSystem.loads).__qualname__}"
        == "builtins.property"
    )
    symbolic_system_0.dynamic_symbols()


@pytest.mark.xfail(strict=True)
def test_case_23():
    system_0 = module_0.System()
    assert (
        f"{type(system_0).__module__}.{type(system_0).__qualname__}"
        == "sympy.physics.mechanics.system.System"
    )
    assert (
        f"{type(module_0.System.from_newtonian).__module__}.{type(module_0.System.from_newtonian).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.System.fixed_point).__module__}.{type(module_0.System.fixed_point).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.frame).__module__}.{type(module_0.System.frame).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.x).__module__}.{type(module_0.System.x).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.y).__module__}.{type(module_0.System.y).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.z).__module__}.{type(module_0.System.z).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.bodies).__module__}.{type(module_0.System.bodies).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.joints).__module__}.{type(module_0.System.joints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.loads).__module__}.{type(module_0.System.loads).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.actuators).__module__}.{type(module_0.System.actuators).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q).__module__}.{type(module_0.System.q).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u).__module__}.{type(module_0.System.u).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q_ind).__module__}.{type(module_0.System.q_ind).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q_dep).__module__}.{type(module_0.System.q_dep).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_ind).__module__}.{type(module_0.System.u_ind).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_dep).__module__}.{type(module_0.System.u_dep).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_aux).__module__}.{type(module_0.System.u_aux).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.kdes).__module__}.{type(module_0.System.kdes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.holonomic_constraints).__module__}.{type(module_0.System.holonomic_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.nonholonomic_constraints).__module__}.{type(module_0.System.nonholonomic_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.velocity_constraints).__module__}.{type(module_0.System.velocity_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.eom_method).__module__}.{type(module_0.System.eom_method).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.mass_matrix).__module__}.{type(module_0.System.mass_matrix).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.mass_matrix_full).__module__}.{type(module_0.System.mass_matrix_full).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.forcing).__module__}.{type(module_0.System.forcing).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.forcing_full).__module__}.{type(module_0.System.forcing_full).__qualname__}"
        == "builtins.property"
    )
    list_0 = [system_0, system_0]
    system_0.add_speeds(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_24():
    system_0 = module_0.System()
    assert (
        f"{type(system_0).__module__}.{type(system_0).__qualname__}"
        == "sympy.physics.mechanics.system.System"
    )
    assert (
        f"{type(module_0.System.from_newtonian).__module__}.{type(module_0.System.from_newtonian).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.System.fixed_point).__module__}.{type(module_0.System.fixed_point).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.frame).__module__}.{type(module_0.System.frame).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.x).__module__}.{type(module_0.System.x).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.y).__module__}.{type(module_0.System.y).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.z).__module__}.{type(module_0.System.z).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.bodies).__module__}.{type(module_0.System.bodies).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.joints).__module__}.{type(module_0.System.joints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.loads).__module__}.{type(module_0.System.loads).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.actuators).__module__}.{type(module_0.System.actuators).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q).__module__}.{type(module_0.System.q).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u).__module__}.{type(module_0.System.u).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q_ind).__module__}.{type(module_0.System.q_ind).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q_dep).__module__}.{type(module_0.System.q_dep).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_ind).__module__}.{type(module_0.System.u_ind).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_dep).__module__}.{type(module_0.System.u_dep).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_aux).__module__}.{type(module_0.System.u_aux).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.kdes).__module__}.{type(module_0.System.kdes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.holonomic_constraints).__module__}.{type(module_0.System.holonomic_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.nonholonomic_constraints).__module__}.{type(module_0.System.nonholonomic_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.velocity_constraints).__module__}.{type(module_0.System.velocity_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.eom_method).__module__}.{type(module_0.System.eom_method).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.mass_matrix).__module__}.{type(module_0.System.mass_matrix).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.mass_matrix_full).__module__}.{type(module_0.System.mass_matrix_full).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.forcing).__module__}.{type(module_0.System.forcing).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.forcing_full).__module__}.{type(module_0.System.forcing_full).__qualname__}"
        == "builtins.property"
    )
    list_0 = [system_0, system_0, system_0, system_0]
    system_0.add_coordinates(*list_0, independent=list_0)


def test_case_25():
    bytes_0 = b"\xf5\xcc\xfbg\xac9\x1ep"
    symbolic_system_0 = module_0.SymbolicSystem(
        bytes_0,
        bytes_0,
        bytes_0,
        coordinate_derivatives=bytes_0,
        speed_idxs=bytes_0,
        loads=bytes_0,
    )
    assert (
        f"{type(symbolic_system_0).__module__}.{type(symbolic_system_0).__qualname__}"
        == "sympy.physics.mechanics.system.SymbolicSystem"
    )
    assert symbolic_system_0.output_eqns == {}
    assert (
        f"{type(module_0.SymbolicSystem.coordinates).__module__}.{type(module_0.SymbolicSystem.coordinates).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.speeds).__module__}.{type(module_0.SymbolicSystem.speeds).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.states).__module__}.{type(module_0.SymbolicSystem.states).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.alg_con).__module__}.{type(module_0.SymbolicSystem.alg_con).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.dyn_implicit_mat).__module__}.{type(module_0.SymbolicSystem.dyn_implicit_mat).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.dyn_implicit_rhs).__module__}.{type(module_0.SymbolicSystem.dyn_implicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_implicit_mat).__module__}.{type(module_0.SymbolicSystem.comb_implicit_mat).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_implicit_rhs).__module__}.{type(module_0.SymbolicSystem.comb_implicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_explicit_rhs).__module__}.{type(module_0.SymbolicSystem.comb_explicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.kin_explicit_rhs).__module__}.{type(module_0.SymbolicSystem.kin_explicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.bodies).__module__}.{type(module_0.SymbolicSystem.bodies).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.loads).__module__}.{type(module_0.SymbolicSystem.loads).__qualname__}"
        == "builtins.property"
    )


@pytest.mark.xfail(strict=True)
def test_case_26():
    bytes_0 = b"\xf5\xcc\xfbg\xac9\x1ep"
    module_0.SymbolicSystem(bytes_0, bytes_0, coord_idxs=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_27():
    bytes_0 = b"\x1c\x87\x15\xd0\xf6\x9d\xdf\xc4\x83D\xd0?\x1drD\xe8"
    module_0.SymbolicSystem(
        bytes_0, bytes_0, mass_matrix=bytes_0, output_eqns=bytes_0, speed_idxs=bytes_0
    )


@pytest.mark.xfail(strict=True)
def test_case_28():
    bytes_0 = b"\xf5\xcc\xfbg\xac9\x1ep"
    symbolic_system_0 = module_0.SymbolicSystem(
        bytes_0,
        bytes_0,
        bytes_0,
        coordinate_derivatives=bytes_0,
        speed_idxs=bytes_0,
        loads=bytes_0,
    )
    assert (
        f"{type(symbolic_system_0).__module__}.{type(symbolic_system_0).__qualname__}"
        == "sympy.physics.mechanics.system.SymbolicSystem"
    )
    assert symbolic_system_0.output_eqns == {}
    assert (
        f"{type(module_0.SymbolicSystem.coordinates).__module__}.{type(module_0.SymbolicSystem.coordinates).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.speeds).__module__}.{type(module_0.SymbolicSystem.speeds).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.states).__module__}.{type(module_0.SymbolicSystem.states).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.alg_con).__module__}.{type(module_0.SymbolicSystem.alg_con).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.dyn_implicit_mat).__module__}.{type(module_0.SymbolicSystem.dyn_implicit_mat).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.dyn_implicit_rhs).__module__}.{type(module_0.SymbolicSystem.dyn_implicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_implicit_mat).__module__}.{type(module_0.SymbolicSystem.comb_implicit_mat).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_implicit_rhs).__module__}.{type(module_0.SymbolicSystem.comb_implicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_explicit_rhs).__module__}.{type(module_0.SymbolicSystem.comb_explicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.kin_explicit_rhs).__module__}.{type(module_0.SymbolicSystem.kin_explicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.bodies).__module__}.{type(module_0.SymbolicSystem.bodies).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.loads).__module__}.{type(module_0.SymbolicSystem.loads).__qualname__}"
        == "builtins.property"
    )
    system_0 = module_0.System()
    assert (
        f"{type(system_0).__module__}.{type(system_0).__qualname__}"
        == "sympy.physics.mechanics.system.System"
    )
    assert (
        f"{type(module_0.System.from_newtonian).__module__}.{type(module_0.System.from_newtonian).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.System.fixed_point).__module__}.{type(module_0.System.fixed_point).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.frame).__module__}.{type(module_0.System.frame).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.x).__module__}.{type(module_0.System.x).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.y).__module__}.{type(module_0.System.y).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.z).__module__}.{type(module_0.System.z).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.bodies).__module__}.{type(module_0.System.bodies).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.joints).__module__}.{type(module_0.System.joints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.loads).__module__}.{type(module_0.System.loads).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.actuators).__module__}.{type(module_0.System.actuators).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q).__module__}.{type(module_0.System.q).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u).__module__}.{type(module_0.System.u).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q_ind).__module__}.{type(module_0.System.q_ind).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q_dep).__module__}.{type(module_0.System.q_dep).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_ind).__module__}.{type(module_0.System.u_ind).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_dep).__module__}.{type(module_0.System.u_dep).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_aux).__module__}.{type(module_0.System.u_aux).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.kdes).__module__}.{type(module_0.System.kdes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.holonomic_constraints).__module__}.{type(module_0.System.holonomic_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.nonholonomic_constraints).__module__}.{type(module_0.System.nonholonomic_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.velocity_constraints).__module__}.{type(module_0.System.velocity_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.eom_method).__module__}.{type(module_0.System.eom_method).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.mass_matrix).__module__}.{type(module_0.System.mass_matrix).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.mass_matrix_full).__module__}.{type(module_0.System.mass_matrix_full).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.forcing).__module__}.{type(module_0.System.forcing).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.forcing_full).__module__}.{type(module_0.System.forcing_full).__qualname__}"
        == "builtins.property"
    )
    symbolic_system_0.dynamic_symbols()


def test_case_29():
    bytes_0 = b"\x1c\x87\x15\xd0\xf6\x9d\xdf\xc4\x83D\xd0?\x1drD\xe8"
    symbolic_system_0 = module_0.SymbolicSystem(bytes_0, bytes_0, bytes_0, bytes_0)
    assert (
        f"{type(symbolic_system_0).__module__}.{type(symbolic_system_0).__qualname__}"
        == "sympy.physics.mechanics.system.SymbolicSystem"
    )
    assert symbolic_system_0.output_eqns == {}
    assert (
        f"{type(module_0.SymbolicSystem.coordinates).__module__}.{type(module_0.SymbolicSystem.coordinates).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.speeds).__module__}.{type(module_0.SymbolicSystem.speeds).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.states).__module__}.{type(module_0.SymbolicSystem.states).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.alg_con).__module__}.{type(module_0.SymbolicSystem.alg_con).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.dyn_implicit_mat).__module__}.{type(module_0.SymbolicSystem.dyn_implicit_mat).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.dyn_implicit_rhs).__module__}.{type(module_0.SymbolicSystem.dyn_implicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_implicit_mat).__module__}.{type(module_0.SymbolicSystem.comb_implicit_mat).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_implicit_rhs).__module__}.{type(module_0.SymbolicSystem.comb_implicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_explicit_rhs).__module__}.{type(module_0.SymbolicSystem.comb_explicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.kin_explicit_rhs).__module__}.{type(module_0.SymbolicSystem.kin_explicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.bodies).__module__}.{type(module_0.SymbolicSystem.bodies).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.loads).__module__}.{type(module_0.SymbolicSystem.loads).__qualname__}"
        == "builtins.property"
    )
    with pytest.raises(AttributeError):
        symbolic_system_0.compute_explicit_form()


@pytest.mark.xfail(strict=True)
def test_case_30():
    bytes_0 = b"\x1c\x87\x15\xd0\xf6\x9d\xdf\xc4\x83D\xd0?\x1drD\xe8"
    symbolic_system_0 = module_0.SymbolicSystem(bytes_0, bytes_0, bytes_0, bytes_0)
    assert (
        f"{type(symbolic_system_0).__module__}.{type(symbolic_system_0).__qualname__}"
        == "sympy.physics.mechanics.system.SymbolicSystem"
    )
    assert symbolic_system_0.output_eqns == {}
    assert (
        f"{type(module_0.SymbolicSystem.coordinates).__module__}.{type(module_0.SymbolicSystem.coordinates).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.speeds).__module__}.{type(module_0.SymbolicSystem.speeds).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.states).__module__}.{type(module_0.SymbolicSystem.states).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.alg_con).__module__}.{type(module_0.SymbolicSystem.alg_con).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.dyn_implicit_mat).__module__}.{type(module_0.SymbolicSystem.dyn_implicit_mat).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.dyn_implicit_rhs).__module__}.{type(module_0.SymbolicSystem.dyn_implicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_implicit_mat).__module__}.{type(module_0.SymbolicSystem.comb_implicit_mat).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_implicit_rhs).__module__}.{type(module_0.SymbolicSystem.comb_implicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_explicit_rhs).__module__}.{type(module_0.SymbolicSystem.comb_explicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.kin_explicit_rhs).__module__}.{type(module_0.SymbolicSystem.kin_explicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.bodies).__module__}.{type(module_0.SymbolicSystem.bodies).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.loads).__module__}.{type(module_0.SymbolicSystem.loads).__qualname__}"
        == "builtins.property"
    )
    symbolic_system_0.constant_symbols()


@pytest.mark.xfail(strict=True)
def test_case_31():
    system_0 = module_0.System()
    assert (
        f"{type(system_0).__module__}.{type(system_0).__qualname__}"
        == "sympy.physics.mechanics.system.System"
    )
    assert (
        f"{type(module_0.System.from_newtonian).__module__}.{type(module_0.System.from_newtonian).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.System.fixed_point).__module__}.{type(module_0.System.fixed_point).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.frame).__module__}.{type(module_0.System.frame).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.x).__module__}.{type(module_0.System.x).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.y).__module__}.{type(module_0.System.y).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.z).__module__}.{type(module_0.System.z).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.bodies).__module__}.{type(module_0.System.bodies).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.joints).__module__}.{type(module_0.System.joints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.loads).__module__}.{type(module_0.System.loads).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.actuators).__module__}.{type(module_0.System.actuators).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q).__module__}.{type(module_0.System.q).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u).__module__}.{type(module_0.System.u).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q_ind).__module__}.{type(module_0.System.q_ind).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q_dep).__module__}.{type(module_0.System.q_dep).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_ind).__module__}.{type(module_0.System.u_ind).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_dep).__module__}.{type(module_0.System.u_dep).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_aux).__module__}.{type(module_0.System.u_aux).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.kdes).__module__}.{type(module_0.System.kdes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.holonomic_constraints).__module__}.{type(module_0.System.holonomic_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.nonholonomic_constraints).__module__}.{type(module_0.System.nonholonomic_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.velocity_constraints).__module__}.{type(module_0.System.velocity_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.eom_method).__module__}.{type(module_0.System.eom_method).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.mass_matrix).__module__}.{type(module_0.System.mass_matrix).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.mass_matrix_full).__module__}.{type(module_0.System.mass_matrix_full).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.forcing).__module__}.{type(module_0.System.forcing).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.forcing_full).__module__}.{type(module_0.System.forcing_full).__qualname__}"
        == "builtins.property"
    )
    list_0 = [system_0, system_0]
    system_0.add_holonomic_constraints(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_32():
    system_0 = module_0.System()
    assert (
        f"{type(system_0).__module__}.{type(system_0).__qualname__}"
        == "sympy.physics.mechanics.system.System"
    )
    assert (
        f"{type(module_0.System.from_newtonian).__module__}.{type(module_0.System.from_newtonian).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.System.fixed_point).__module__}.{type(module_0.System.fixed_point).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.frame).__module__}.{type(module_0.System.frame).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.x).__module__}.{type(module_0.System.x).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.y).__module__}.{type(module_0.System.y).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.z).__module__}.{type(module_0.System.z).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.bodies).__module__}.{type(module_0.System.bodies).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.joints).__module__}.{type(module_0.System.joints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.loads).__module__}.{type(module_0.System.loads).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.actuators).__module__}.{type(module_0.System.actuators).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q).__module__}.{type(module_0.System.q).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u).__module__}.{type(module_0.System.u).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q_ind).__module__}.{type(module_0.System.q_ind).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q_dep).__module__}.{type(module_0.System.q_dep).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_ind).__module__}.{type(module_0.System.u_ind).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_dep).__module__}.{type(module_0.System.u_dep).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_aux).__module__}.{type(module_0.System.u_aux).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.kdes).__module__}.{type(module_0.System.kdes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.holonomic_constraints).__module__}.{type(module_0.System.holonomic_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.nonholonomic_constraints).__module__}.{type(module_0.System.nonholonomic_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.velocity_constraints).__module__}.{type(module_0.System.velocity_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.eom_method).__module__}.{type(module_0.System.eom_method).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.mass_matrix).__module__}.{type(module_0.System.mass_matrix).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.mass_matrix_full).__module__}.{type(module_0.System.mass_matrix_full).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.forcing).__module__}.{type(module_0.System.forcing).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.forcing_full).__module__}.{type(module_0.System.forcing_full).__qualname__}"
        == "builtins.property"
    )
    var_0 = system_0.add_auxiliary_speeds()
    var_1 = system_0.add_holonomic_constraints()
    var_1.validate_system()


@pytest.mark.xfail(strict=True)
def test_case_33():
    none_type_0 = None
    bytes_0 = b"\x1c\x87\x15\xd0\xf6\x9d\xdf\xc4\x83D\xf4\x15\xd0?\x1drD\xe8"
    symbolic_system_0 = module_0.SymbolicSystem(bytes_0, none_type_0, bytes_0, bytes_0)
    assert (
        f"{type(symbolic_system_0).__module__}.{type(symbolic_system_0).__qualname__}"
        == "sympy.physics.mechanics.system.SymbolicSystem"
    )
    assert symbolic_system_0.output_eqns == {}
    assert (
        f"{type(module_0.SymbolicSystem.coordinates).__module__}.{type(module_0.SymbolicSystem.coordinates).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.speeds).__module__}.{type(module_0.SymbolicSystem.speeds).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.states).__module__}.{type(module_0.SymbolicSystem.states).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.alg_con).__module__}.{type(module_0.SymbolicSystem.alg_con).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.dyn_implicit_mat).__module__}.{type(module_0.SymbolicSystem.dyn_implicit_mat).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.dyn_implicit_rhs).__module__}.{type(module_0.SymbolicSystem.dyn_implicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_implicit_mat).__module__}.{type(module_0.SymbolicSystem.comb_implicit_mat).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_implicit_rhs).__module__}.{type(module_0.SymbolicSystem.comb_implicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_explicit_rhs).__module__}.{type(module_0.SymbolicSystem.comb_explicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.kin_explicit_rhs).__module__}.{type(module_0.SymbolicSystem.kin_explicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.bodies).__module__}.{type(module_0.SymbolicSystem.bodies).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.loads).__module__}.{type(module_0.SymbolicSystem.loads).__qualname__}"
        == "builtins.property"
    )
    symbolic_system_0.dynamic_symbols()


def test_case_34():
    bytes_0 = b"\x1c\x87\x15\xd0\xf6\x9d\xdf\xc4\x83D\xd0?\x1drD\xe8"
    none_type_0 = None
    symbolic_system_0 = module_0.SymbolicSystem(bytes_0, bytes_0, bodies=none_type_0)
    assert (
        f"{type(symbolic_system_0).__module__}.{type(symbolic_system_0).__qualname__}"
        == "sympy.physics.mechanics.system.SymbolicSystem"
    )
    assert symbolic_system_0.output_eqns == {}
    assert (
        f"{type(module_0.SymbolicSystem.coordinates).__module__}.{type(module_0.SymbolicSystem.coordinates).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.speeds).__module__}.{type(module_0.SymbolicSystem.speeds).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.states).__module__}.{type(module_0.SymbolicSystem.states).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.alg_con).__module__}.{type(module_0.SymbolicSystem.alg_con).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.dyn_implicit_mat).__module__}.{type(module_0.SymbolicSystem.dyn_implicit_mat).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.dyn_implicit_rhs).__module__}.{type(module_0.SymbolicSystem.dyn_implicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_implicit_mat).__module__}.{type(module_0.SymbolicSystem.comb_implicit_mat).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_implicit_rhs).__module__}.{type(module_0.SymbolicSystem.comb_implicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_explicit_rhs).__module__}.{type(module_0.SymbolicSystem.comb_explicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.kin_explicit_rhs).__module__}.{type(module_0.SymbolicSystem.kin_explicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.bodies).__module__}.{type(module_0.SymbolicSystem.bodies).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.loads).__module__}.{type(module_0.SymbolicSystem.loads).__qualname__}"
        == "builtins.property"
    )
    with pytest.raises(AttributeError):
        symbolic_system_0.compute_explicit_form()


@pytest.mark.xfail(strict=True)
def test_case_35():
    bytes_0 = b"\xf5\xcc\xfbg\xac9\x1ep"
    symbolic_system_0 = module_0.SymbolicSystem(
        bytes_0,
        bytes_0,
        bytes_0,
        coordinate_derivatives=bytes_0,
        speed_idxs=bytes_0,
        loads=bytes_0,
    )
    assert (
        f"{type(symbolic_system_0).__module__}.{type(symbolic_system_0).__qualname__}"
        == "sympy.physics.mechanics.system.SymbolicSystem"
    )
    assert symbolic_system_0.output_eqns == {}
    assert (
        f"{type(module_0.SymbolicSystem.coordinates).__module__}.{type(module_0.SymbolicSystem.coordinates).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.speeds).__module__}.{type(module_0.SymbolicSystem.speeds).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.states).__module__}.{type(module_0.SymbolicSystem.states).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.alg_con).__module__}.{type(module_0.SymbolicSystem.alg_con).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.dyn_implicit_mat).__module__}.{type(module_0.SymbolicSystem.dyn_implicit_mat).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.dyn_implicit_rhs).__module__}.{type(module_0.SymbolicSystem.dyn_implicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_implicit_mat).__module__}.{type(module_0.SymbolicSystem.comb_implicit_mat).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_implicit_rhs).__module__}.{type(module_0.SymbolicSystem.comb_implicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_explicit_rhs).__module__}.{type(module_0.SymbolicSystem.comb_explicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.kin_explicit_rhs).__module__}.{type(module_0.SymbolicSystem.kin_explicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.bodies).__module__}.{type(module_0.SymbolicSystem.bodies).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.loads).__module__}.{type(module_0.SymbolicSystem.loads).__qualname__}"
        == "builtins.property"
    )
    system_0 = module_0.System()
    assert (
        f"{type(system_0).__module__}.{type(system_0).__qualname__}"
        == "sympy.physics.mechanics.system.System"
    )
    assert (
        f"{type(module_0.System.from_newtonian).__module__}.{type(module_0.System.from_newtonian).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.System.fixed_point).__module__}.{type(module_0.System.fixed_point).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.frame).__module__}.{type(module_0.System.frame).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.x).__module__}.{type(module_0.System.x).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.y).__module__}.{type(module_0.System.y).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.z).__module__}.{type(module_0.System.z).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.bodies).__module__}.{type(module_0.System.bodies).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.joints).__module__}.{type(module_0.System.joints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.loads).__module__}.{type(module_0.System.loads).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.actuators).__module__}.{type(module_0.System.actuators).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q).__module__}.{type(module_0.System.q).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u).__module__}.{type(module_0.System.u).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q_ind).__module__}.{type(module_0.System.q_ind).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q_dep).__module__}.{type(module_0.System.q_dep).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_ind).__module__}.{type(module_0.System.u_ind).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_dep).__module__}.{type(module_0.System.u_dep).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_aux).__module__}.{type(module_0.System.u_aux).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.kdes).__module__}.{type(module_0.System.kdes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.holonomic_constraints).__module__}.{type(module_0.System.holonomic_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.nonholonomic_constraints).__module__}.{type(module_0.System.nonholonomic_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.velocity_constraints).__module__}.{type(module_0.System.velocity_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.eom_method).__module__}.{type(module_0.System.eom_method).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.mass_matrix).__module__}.{type(module_0.System.mass_matrix).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.mass_matrix_full).__module__}.{type(module_0.System.mass_matrix_full).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.forcing).__module__}.{type(module_0.System.forcing).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.forcing_full).__module__}.{type(module_0.System.forcing_full).__qualname__}"
        == "builtins.property"
    )
    var_0 = system_0.apply_uniform_gravity(system_0)
    var_1 = system_0.validate_system(check_duplicates=bytes_0)
    var_2 = system_0.get_body(bytes_0)
    var_3 = system_0.add_speeds(independent=system_0)
    list_0 = [system_0, system_0]
    var_4 = system_0.add_joints()
    var_5 = system_0.get_joint(list_0)
    var_6 = system_0.validate_system()
    system_0.add_holonomic_constraints(*list_0)


def test_case_36():
    tuple_0 = ()
    symbolic_system_0 = module_0.SymbolicSystem(tuple_0, tuple_0, bodies=tuple_0)
    assert (
        f"{type(symbolic_system_0).__module__}.{type(symbolic_system_0).__qualname__}"
        == "sympy.physics.mechanics.system.SymbolicSystem"
    )
    assert symbolic_system_0.output_eqns == {}
    assert (
        f"{type(module_0.SymbolicSystem.coordinates).__module__}.{type(module_0.SymbolicSystem.coordinates).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.speeds).__module__}.{type(module_0.SymbolicSystem.speeds).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.states).__module__}.{type(module_0.SymbolicSystem.states).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.alg_con).__module__}.{type(module_0.SymbolicSystem.alg_con).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.dyn_implicit_mat).__module__}.{type(module_0.SymbolicSystem.dyn_implicit_mat).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.dyn_implicit_rhs).__module__}.{type(module_0.SymbolicSystem.dyn_implicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_implicit_mat).__module__}.{type(module_0.SymbolicSystem.comb_implicit_mat).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_implicit_rhs).__module__}.{type(module_0.SymbolicSystem.comb_implicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_explicit_rhs).__module__}.{type(module_0.SymbolicSystem.comb_explicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.kin_explicit_rhs).__module__}.{type(module_0.SymbolicSystem.kin_explicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.bodies).__module__}.{type(module_0.SymbolicSystem.bodies).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.loads).__module__}.{type(module_0.SymbolicSystem.loads).__qualname__}"
        == "builtins.property"
    )


@pytest.mark.xfail(strict=True)
def test_case_37():
    tuple_0 = ()
    none_type_0 = None
    symbolic_system_0 = module_0.SymbolicSystem(
        tuple_0,
        tuple_0,
        none_type_0,
        coordinate_derivatives=none_type_0,
        alg_con=none_type_0,
        output_eqns=none_type_0,
        coord_idxs=none_type_0,
        speed_idxs=none_type_0,
    )
    assert (
        f"{type(symbolic_system_0).__module__}.{type(symbolic_system_0).__qualname__}"
        == "sympy.physics.mechanics.system.SymbolicSystem"
    )
    assert symbolic_system_0.output_eqns is None
    assert (
        f"{type(module_0.SymbolicSystem.coordinates).__module__}.{type(module_0.SymbolicSystem.coordinates).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.speeds).__module__}.{type(module_0.SymbolicSystem.speeds).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.states).__module__}.{type(module_0.SymbolicSystem.states).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.alg_con).__module__}.{type(module_0.SymbolicSystem.alg_con).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.dyn_implicit_mat).__module__}.{type(module_0.SymbolicSystem.dyn_implicit_mat).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.dyn_implicit_rhs).__module__}.{type(module_0.SymbolicSystem.dyn_implicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_implicit_mat).__module__}.{type(module_0.SymbolicSystem.comb_implicit_mat).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_implicit_rhs).__module__}.{type(module_0.SymbolicSystem.comb_implicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_explicit_rhs).__module__}.{type(module_0.SymbolicSystem.comb_explicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.kin_explicit_rhs).__module__}.{type(module_0.SymbolicSystem.kin_explicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.bodies).__module__}.{type(module_0.SymbolicSystem.bodies).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.loads).__module__}.{type(module_0.SymbolicSystem.loads).__qualname__}"
        == "builtins.property"
    )
    symbolic_system_0.constant_symbols()


def test_case_38():
    tuple_0 = ()
    symbolic_system_0 = module_0.SymbolicSystem(tuple_0, tuple_0)
    assert (
        f"{type(symbolic_system_0).__module__}.{type(symbolic_system_0).__qualname__}"
        == "sympy.physics.mechanics.system.SymbolicSystem"
    )
    assert symbolic_system_0.output_eqns == {}
    assert (
        f"{type(module_0.SymbolicSystem.coordinates).__module__}.{type(module_0.SymbolicSystem.coordinates).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.speeds).__module__}.{type(module_0.SymbolicSystem.speeds).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.states).__module__}.{type(module_0.SymbolicSystem.states).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.alg_con).__module__}.{type(module_0.SymbolicSystem.alg_con).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.dyn_implicit_mat).__module__}.{type(module_0.SymbolicSystem.dyn_implicit_mat).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.dyn_implicit_rhs).__module__}.{type(module_0.SymbolicSystem.dyn_implicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_implicit_mat).__module__}.{type(module_0.SymbolicSystem.comb_implicit_mat).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_implicit_rhs).__module__}.{type(module_0.SymbolicSystem.comb_implicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_explicit_rhs).__module__}.{type(module_0.SymbolicSystem.comb_explicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.kin_explicit_rhs).__module__}.{type(module_0.SymbolicSystem.kin_explicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.bodies).__module__}.{type(module_0.SymbolicSystem.bodies).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.loads).__module__}.{type(module_0.SymbolicSystem.loads).__qualname__}"
        == "builtins.property"
    )
    var_0 = symbolic_system_0.dynamic_symbols()


@pytest.mark.xfail(strict=True)
def test_case_39():
    system_0 = module_0.System()
    assert (
        f"{type(system_0).__module__}.{type(system_0).__qualname__}"
        == "sympy.physics.mechanics.system.System"
    )
    assert (
        f"{type(module_0.System.from_newtonian).__module__}.{type(module_0.System.from_newtonian).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.System.fixed_point).__module__}.{type(module_0.System.fixed_point).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.frame).__module__}.{type(module_0.System.frame).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.x).__module__}.{type(module_0.System.x).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.y).__module__}.{type(module_0.System.y).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.z).__module__}.{type(module_0.System.z).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.bodies).__module__}.{type(module_0.System.bodies).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.joints).__module__}.{type(module_0.System.joints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.loads).__module__}.{type(module_0.System.loads).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.actuators).__module__}.{type(module_0.System.actuators).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q).__module__}.{type(module_0.System.q).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u).__module__}.{type(module_0.System.u).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q_ind).__module__}.{type(module_0.System.q_ind).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q_dep).__module__}.{type(module_0.System.q_dep).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_ind).__module__}.{type(module_0.System.u_ind).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_dep).__module__}.{type(module_0.System.u_dep).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_aux).__module__}.{type(module_0.System.u_aux).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.kdes).__module__}.{type(module_0.System.kdes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.holonomic_constraints).__module__}.{type(module_0.System.holonomic_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.nonholonomic_constraints).__module__}.{type(module_0.System.nonholonomic_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.velocity_constraints).__module__}.{type(module_0.System.velocity_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.eom_method).__module__}.{type(module_0.System.eom_method).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.mass_matrix).__module__}.{type(module_0.System.mass_matrix).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.mass_matrix_full).__module__}.{type(module_0.System.mass_matrix_full).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.forcing).__module__}.{type(module_0.System.forcing).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.forcing_full).__module__}.{type(module_0.System.forcing_full).__qualname__}"
        == "builtins.property"
    )
    var_0 = system_0.get_body(system_0)
    system_1 = module_0.System()
    system_1.mass_matrix()


def test_case_40():
    bytes_0 = b"\x1c\x87\x15\xd0\xf6\x9d\xdf\xc4\x83D\xd0?\x1drD\xe8"
    str_0 = "9[D{DrKp\n=afA\r)\nUZ"
    symbolic_system_0 = module_0.SymbolicSystem(
        bytes_0,
        bytes_0,
        bytes_0,
        coordinate_derivatives=bytes_0,
        output_eqns=str_0,
        coord_idxs=bytes_0,
    )
    assert (
        f"{type(symbolic_system_0).__module__}.{type(symbolic_system_0).__qualname__}"
        == "sympy.physics.mechanics.system.SymbolicSystem"
    )
    assert symbolic_system_0.output_eqns == "9[D{DrKp\n=afA\r)\nUZ"
    assert (
        f"{type(module_0.SymbolicSystem.coordinates).__module__}.{type(module_0.SymbolicSystem.coordinates).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.speeds).__module__}.{type(module_0.SymbolicSystem.speeds).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.states).__module__}.{type(module_0.SymbolicSystem.states).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.alg_con).__module__}.{type(module_0.SymbolicSystem.alg_con).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.dyn_implicit_mat).__module__}.{type(module_0.SymbolicSystem.dyn_implicit_mat).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.dyn_implicit_rhs).__module__}.{type(module_0.SymbolicSystem.dyn_implicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_implicit_mat).__module__}.{type(module_0.SymbolicSystem.comb_implicit_mat).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_implicit_rhs).__module__}.{type(module_0.SymbolicSystem.comb_implicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_explicit_rhs).__module__}.{type(module_0.SymbolicSystem.comb_explicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.kin_explicit_rhs).__module__}.{type(module_0.SymbolicSystem.kin_explicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.bodies).__module__}.{type(module_0.SymbolicSystem.bodies).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.loads).__module__}.{type(module_0.SymbolicSystem.loads).__qualname__}"
        == "builtins.property"
    )
    with pytest.raises(AttributeError):
        symbolic_system_0.compute_explicit_form()


def test_case_41():
    bytes_0 = b"\xf5\xcc\xfb\x13\xac9\x1ep"
    symbolic_system_0 = module_0.SymbolicSystem(bytes_0, bytes_0, alg_con=bytes_0)
    assert (
        f"{type(symbolic_system_0).__module__}.{type(symbolic_system_0).__qualname__}"
        == "sympy.physics.mechanics.system.SymbolicSystem"
    )
    assert symbolic_system_0.output_eqns == {}
    assert (
        f"{type(module_0.SymbolicSystem.coordinates).__module__}.{type(module_0.SymbolicSystem.coordinates).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.speeds).__module__}.{type(module_0.SymbolicSystem.speeds).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.states).__module__}.{type(module_0.SymbolicSystem.states).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.alg_con).__module__}.{type(module_0.SymbolicSystem.alg_con).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.dyn_implicit_mat).__module__}.{type(module_0.SymbolicSystem.dyn_implicit_mat).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.dyn_implicit_rhs).__module__}.{type(module_0.SymbolicSystem.dyn_implicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_implicit_mat).__module__}.{type(module_0.SymbolicSystem.comb_implicit_mat).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_implicit_rhs).__module__}.{type(module_0.SymbolicSystem.comb_implicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_explicit_rhs).__module__}.{type(module_0.SymbolicSystem.comb_explicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.kin_explicit_rhs).__module__}.{type(module_0.SymbolicSystem.kin_explicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.bodies).__module__}.{type(module_0.SymbolicSystem.bodies).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.loads).__module__}.{type(module_0.SymbolicSystem.loads).__qualname__}"
        == "builtins.property"
    )


@pytest.mark.xfail(strict=True)
def test_case_42():
    system_0 = module_0.System()
    assert (
        f"{type(system_0).__module__}.{type(system_0).__qualname__}"
        == "sympy.physics.mechanics.system.System"
    )
    assert (
        f"{type(module_0.System.from_newtonian).__module__}.{type(module_0.System.from_newtonian).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.System.fixed_point).__module__}.{type(module_0.System.fixed_point).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.frame).__module__}.{type(module_0.System.frame).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.x).__module__}.{type(module_0.System.x).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.y).__module__}.{type(module_0.System.y).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.z).__module__}.{type(module_0.System.z).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.bodies).__module__}.{type(module_0.System.bodies).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.joints).__module__}.{type(module_0.System.joints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.loads).__module__}.{type(module_0.System.loads).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.actuators).__module__}.{type(module_0.System.actuators).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q).__module__}.{type(module_0.System.q).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u).__module__}.{type(module_0.System.u).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q_ind).__module__}.{type(module_0.System.q_ind).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q_dep).__module__}.{type(module_0.System.q_dep).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_ind).__module__}.{type(module_0.System.u_ind).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_dep).__module__}.{type(module_0.System.u_dep).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_aux).__module__}.{type(module_0.System.u_aux).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.kdes).__module__}.{type(module_0.System.kdes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.holonomic_constraints).__module__}.{type(module_0.System.holonomic_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.nonholonomic_constraints).__module__}.{type(module_0.System.nonholonomic_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.velocity_constraints).__module__}.{type(module_0.System.velocity_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.eom_method).__module__}.{type(module_0.System.eom_method).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.mass_matrix).__module__}.{type(module_0.System.mass_matrix).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.mass_matrix_full).__module__}.{type(module_0.System.mass_matrix_full).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.forcing).__module__}.{type(module_0.System.forcing).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.forcing_full).__module__}.{type(module_0.System.forcing_full).__qualname__}"
        == "builtins.property"
    )
    list_0 = [system_0, system_0]
    system_0.add_loads(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_43():
    bytes_0 = b"\xf5\xcc\xfbg\xac9\x1ep"
    bytes_1 = b"\x1c\x87\x15\xd0\xf6\x9d\xdf\xc4\x83D\xf4\x15\xd0?\x1drD\xe8"
    symbolic_system_0 = module_0.SymbolicSystem(
        bytes_1, bytes_0, mass_matrix=bytes_0, coordinate_derivatives=bytes_1
    )
    assert (
        f"{type(symbolic_system_0).__module__}.{type(symbolic_system_0).__qualname__}"
        == "sympy.physics.mechanics.system.SymbolicSystem"
    )
    assert symbolic_system_0.output_eqns == {}
    assert (
        f"{type(module_0.SymbolicSystem.coordinates).__module__}.{type(module_0.SymbolicSystem.coordinates).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.speeds).__module__}.{type(module_0.SymbolicSystem.speeds).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.states).__module__}.{type(module_0.SymbolicSystem.states).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.alg_con).__module__}.{type(module_0.SymbolicSystem.alg_con).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.dyn_implicit_mat).__module__}.{type(module_0.SymbolicSystem.dyn_implicit_mat).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.dyn_implicit_rhs).__module__}.{type(module_0.SymbolicSystem.dyn_implicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_implicit_mat).__module__}.{type(module_0.SymbolicSystem.comb_implicit_mat).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_implicit_rhs).__module__}.{type(module_0.SymbolicSystem.comb_implicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_explicit_rhs).__module__}.{type(module_0.SymbolicSystem.comb_explicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.kin_explicit_rhs).__module__}.{type(module_0.SymbolicSystem.kin_explicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.bodies).__module__}.{type(module_0.SymbolicSystem.bodies).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.loads).__module__}.{type(module_0.SymbolicSystem.loads).__qualname__}"
        == "builtins.property"
    )
    symbolic_system_0.dynamic_symbols()


def test_case_44():
    bytes_0 = b"\xf5\xcc\xfbg\xac9\x1ep"
    symbolic_system_0 = module_0.SymbolicSystem(
        bytes_0, bytes_0, coordinate_derivatives=bytes_0, alg_con=bytes_0
    )
    assert (
        f"{type(symbolic_system_0).__module__}.{type(symbolic_system_0).__qualname__}"
        == "sympy.physics.mechanics.system.SymbolicSystem"
    )
    assert symbolic_system_0.output_eqns == {}
    assert (
        f"{type(module_0.SymbolicSystem.coordinates).__module__}.{type(module_0.SymbolicSystem.coordinates).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.speeds).__module__}.{type(module_0.SymbolicSystem.speeds).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.states).__module__}.{type(module_0.SymbolicSystem.states).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.alg_con).__module__}.{type(module_0.SymbolicSystem.alg_con).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.dyn_implicit_mat).__module__}.{type(module_0.SymbolicSystem.dyn_implicit_mat).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.dyn_implicit_rhs).__module__}.{type(module_0.SymbolicSystem.dyn_implicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_implicit_mat).__module__}.{type(module_0.SymbolicSystem.comb_implicit_mat).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_implicit_rhs).__module__}.{type(module_0.SymbolicSystem.comb_implicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_explicit_rhs).__module__}.{type(module_0.SymbolicSystem.comb_explicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.kin_explicit_rhs).__module__}.{type(module_0.SymbolicSystem.kin_explicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.bodies).__module__}.{type(module_0.SymbolicSystem.bodies).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.loads).__module__}.{type(module_0.SymbolicSystem.loads).__qualname__}"
        == "builtins.property"
    )
    system_0 = module_0.System()
    assert (
        f"{type(system_0).__module__}.{type(system_0).__qualname__}"
        == "sympy.physics.mechanics.system.System"
    )
    assert (
        f"{type(module_0.System.from_newtonian).__module__}.{type(module_0.System.from_newtonian).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.System.fixed_point).__module__}.{type(module_0.System.fixed_point).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.frame).__module__}.{type(module_0.System.frame).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.x).__module__}.{type(module_0.System.x).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.y).__module__}.{type(module_0.System.y).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.z).__module__}.{type(module_0.System.z).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.bodies).__module__}.{type(module_0.System.bodies).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.joints).__module__}.{type(module_0.System.joints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.loads).__module__}.{type(module_0.System.loads).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.actuators).__module__}.{type(module_0.System.actuators).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q).__module__}.{type(module_0.System.q).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u).__module__}.{type(module_0.System.u).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q_ind).__module__}.{type(module_0.System.q_ind).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q_dep).__module__}.{type(module_0.System.q_dep).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_ind).__module__}.{type(module_0.System.u_ind).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_dep).__module__}.{type(module_0.System.u_dep).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_aux).__module__}.{type(module_0.System.u_aux).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.kdes).__module__}.{type(module_0.System.kdes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.holonomic_constraints).__module__}.{type(module_0.System.holonomic_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.nonholonomic_constraints).__module__}.{type(module_0.System.nonholonomic_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.velocity_constraints).__module__}.{type(module_0.System.velocity_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.eom_method).__module__}.{type(module_0.System.eom_method).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.mass_matrix).__module__}.{type(module_0.System.mass_matrix).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.mass_matrix_full).__module__}.{type(module_0.System.mass_matrix_full).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.forcing).__module__}.{type(module_0.System.forcing).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.forcing_full).__module__}.{type(module_0.System.forcing_full).__qualname__}"
        == "builtins.property"
    )
    var_0 = system_0.validate_system()


def test_case_45():
    bytes_0 = b""
    symbolic_system_0 = module_0.SymbolicSystem(
        bytes_0,
        bytes_0,
        alg_con=bytes_0,
        coord_idxs=bytes_0,
        speed_idxs=bytes_0,
        loads=bytes_0,
    )
    assert (
        f"{type(symbolic_system_0).__module__}.{type(symbolic_system_0).__qualname__}"
        == "sympy.physics.mechanics.system.SymbolicSystem"
    )
    assert symbolic_system_0.output_eqns == {}
    assert (
        f"{type(module_0.SymbolicSystem.coordinates).__module__}.{type(module_0.SymbolicSystem.coordinates).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.speeds).__module__}.{type(module_0.SymbolicSystem.speeds).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.states).__module__}.{type(module_0.SymbolicSystem.states).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.alg_con).__module__}.{type(module_0.SymbolicSystem.alg_con).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.dyn_implicit_mat).__module__}.{type(module_0.SymbolicSystem.dyn_implicit_mat).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.dyn_implicit_rhs).__module__}.{type(module_0.SymbolicSystem.dyn_implicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_implicit_mat).__module__}.{type(module_0.SymbolicSystem.comb_implicit_mat).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_implicit_rhs).__module__}.{type(module_0.SymbolicSystem.comb_implicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_explicit_rhs).__module__}.{type(module_0.SymbolicSystem.comb_explicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.kin_explicit_rhs).__module__}.{type(module_0.SymbolicSystem.kin_explicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.bodies).__module__}.{type(module_0.SymbolicSystem.bodies).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.loads).__module__}.{type(module_0.SymbolicSystem.loads).__qualname__}"
        == "builtins.property"
    )
    with pytest.raises(TypeError):
        module_0.System(symbolic_system_0, symbolic_system_0)


def test_case_46():
    tuple_0 = ()
    symbolic_system_0 = module_0.SymbolicSystem(
        tuple_0,
        tuple_0,
        alg_con=tuple_0,
        output_eqns=tuple_0,
        speed_idxs=tuple_0,
        loads=tuple_0,
    )
    assert (
        f"{type(symbolic_system_0).__module__}.{type(symbolic_system_0).__qualname__}"
        == "sympy.physics.mechanics.system.SymbolicSystem"
    )
    assert symbolic_system_0.output_eqns == ()
    assert (
        f"{type(module_0.SymbolicSystem.coordinates).__module__}.{type(module_0.SymbolicSystem.coordinates).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.speeds).__module__}.{type(module_0.SymbolicSystem.speeds).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.states).__module__}.{type(module_0.SymbolicSystem.states).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.alg_con).__module__}.{type(module_0.SymbolicSystem.alg_con).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.dyn_implicit_mat).__module__}.{type(module_0.SymbolicSystem.dyn_implicit_mat).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.dyn_implicit_rhs).__module__}.{type(module_0.SymbolicSystem.dyn_implicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_implicit_mat).__module__}.{type(module_0.SymbolicSystem.comb_implicit_mat).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_implicit_rhs).__module__}.{type(module_0.SymbolicSystem.comb_implicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_explicit_rhs).__module__}.{type(module_0.SymbolicSystem.comb_explicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.kin_explicit_rhs).__module__}.{type(module_0.SymbolicSystem.kin_explicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.bodies).__module__}.{type(module_0.SymbolicSystem.bodies).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.loads).__module__}.{type(module_0.SymbolicSystem.loads).__qualname__}"
        == "builtins.property"
    )
    with pytest.raises(AttributeError):
        symbolic_system_0.compute_explicit_form()


@pytest.mark.xfail(strict=True)
def test_case_47():
    bytes_0 = b"\xf5\xcc\xfbg\xac9\x1ep"
    symbolic_system_0 = module_0.SymbolicSystem(
        bytes_0,
        bytes_0,
        bytes_0,
        coordinate_derivatives=bytes_0,
        speed_idxs=bytes_0,
        loads=bytes_0,
    )
    assert (
        f"{type(symbolic_system_0).__module__}.{type(symbolic_system_0).__qualname__}"
        == "sympy.physics.mechanics.system.SymbolicSystem"
    )
    assert symbolic_system_0.output_eqns == {}
    assert (
        f"{type(module_0.SymbolicSystem.coordinates).__module__}.{type(module_0.SymbolicSystem.coordinates).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.speeds).__module__}.{type(module_0.SymbolicSystem.speeds).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.states).__module__}.{type(module_0.SymbolicSystem.states).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.alg_con).__module__}.{type(module_0.SymbolicSystem.alg_con).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.dyn_implicit_mat).__module__}.{type(module_0.SymbolicSystem.dyn_implicit_mat).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.dyn_implicit_rhs).__module__}.{type(module_0.SymbolicSystem.dyn_implicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_implicit_mat).__module__}.{type(module_0.SymbolicSystem.comb_implicit_mat).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_implicit_rhs).__module__}.{type(module_0.SymbolicSystem.comb_implicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.comb_explicit_rhs).__module__}.{type(module_0.SymbolicSystem.comb_explicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.kin_explicit_rhs).__module__}.{type(module_0.SymbolicSystem.kin_explicit_rhs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.bodies).__module__}.{type(module_0.SymbolicSystem.bodies).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.SymbolicSystem.loads).__module__}.{type(module_0.SymbolicSystem.loads).__qualname__}"
        == "builtins.property"
    )
    symbolic_system_0.bodies()


@pytest.mark.xfail(strict=True)
def test_case_48():
    system_0 = module_0.System()
    assert (
        f"{type(system_0).__module__}.{type(system_0).__qualname__}"
        == "sympy.physics.mechanics.system.System"
    )
    assert (
        f"{type(module_0.System.from_newtonian).__module__}.{type(module_0.System.from_newtonian).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.System.fixed_point).__module__}.{type(module_0.System.fixed_point).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.frame).__module__}.{type(module_0.System.frame).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.x).__module__}.{type(module_0.System.x).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.y).__module__}.{type(module_0.System.y).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.z).__module__}.{type(module_0.System.z).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.bodies).__module__}.{type(module_0.System.bodies).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.joints).__module__}.{type(module_0.System.joints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.loads).__module__}.{type(module_0.System.loads).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.actuators).__module__}.{type(module_0.System.actuators).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q).__module__}.{type(module_0.System.q).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u).__module__}.{type(module_0.System.u).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q_ind).__module__}.{type(module_0.System.q_ind).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.q_dep).__module__}.{type(module_0.System.q_dep).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_ind).__module__}.{type(module_0.System.u_ind).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_dep).__module__}.{type(module_0.System.u_dep).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.u_aux).__module__}.{type(module_0.System.u_aux).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.kdes).__module__}.{type(module_0.System.kdes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.holonomic_constraints).__module__}.{type(module_0.System.holonomic_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.nonholonomic_constraints).__module__}.{type(module_0.System.nonholonomic_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.velocity_constraints).__module__}.{type(module_0.System.velocity_constraints).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.eom_method).__module__}.{type(module_0.System.eom_method).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.mass_matrix).__module__}.{type(module_0.System.mass_matrix).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.mass_matrix_full).__module__}.{type(module_0.System.mass_matrix_full).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.forcing).__module__}.{type(module_0.System.forcing).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.System.forcing_full).__module__}.{type(module_0.System.forcing_full).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    system_0.add_speeds(*list_0, independent=none_type_0)
