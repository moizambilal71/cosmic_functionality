# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import sympy.physics.mechanics.models as module_0


def test_case_0():
    var_0 = module_0.multi_mass_spring_damper()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "sympy.physics.mechanics.kane.KanesMethod"
    )
    assert var_0.explicit_kinematics is True


def test_case_1():
    var_0 = module_0.n_link_pendulum_on_cart()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "sympy.physics.mechanics.kane.KanesMethod"
    )
    assert var_0.explicit_kinematics is True


@pytest.mark.xfail(strict=True)
def test_case_2():
    var_0 = module_0.multi_mass_spring_damper()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "sympy.physics.mechanics.kane.KanesMethod"
    )
    assert var_0.explicit_kinematics is True
    var_1 = module_0.n_link_pendulum_on_cart()
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "sympy.physics.mechanics.kane.KanesMethod"
    )
    assert var_1.explicit_kinematics is True
    var_2 = module_0.n_link_pendulum_on_cart()
    var_3 = module_0.multi_mass_spring_damper(apply_gravity=var_0)
    var_1.replace(var_1, var_1)


def test_case_3():
    bool_0 = True
    var_0 = module_0.multi_mass_spring_damper(apply_external_forces=bool_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "sympy.physics.mechanics.kane.KanesMethod"
    )
    assert var_0.explicit_kinematics is True
    var_1 = module_0.n_link_pendulum_on_cart(bool_0, var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "sympy.physics.mechanics.kane.KanesMethod"
    )
    assert var_1.explicit_kinematics is True


def test_case_4():
    none_type_0 = None
    var_0 = module_0.n_link_pendulum_on_cart(
        cart_force=none_type_0, joint_torques=none_type_0
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "sympy.physics.mechanics.kane.KanesMethod"
    )
    assert var_0.explicit_kinematics is True


def test_case_5():
    bool_0 = False
    with pytest.raises(ValueError):
        module_0.n_link_pendulum_on_cart(bool_0, joint_torques=bool_0)


def test_case_6():
    bool_0 = True
    var_0 = module_0.n_link_pendulum_on_cart(bool_0, joint_torques=bool_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "sympy.physics.mechanics.kane.KanesMethod"
    )
    assert var_0.explicit_kinematics is True
    var_1 = module_0.multi_mass_spring_damper(apply_external_forces=bool_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "sympy.physics.mechanics.kane.KanesMethod"
    )
    assert var_1.explicit_kinematics is True


@pytest.mark.xfail(strict=True)
def test_case_7():
    var_0 = module_0.n_link_pendulum_on_cart()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "sympy.physics.mechanics.kane.KanesMethod"
    )
    assert var_0.explicit_kinematics is True
    bool_0 = True
    var_1 = module_0.n_link_pendulum_on_cart(bool_0, joint_torques=bool_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "sympy.physics.mechanics.kane.KanesMethod"
    )
    assert var_1.explicit_kinematics is True
    var_2 = module_0.n_link_pendulum_on_cart(bool_0, var_1)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "sympy.physics.mechanics.kane.KanesMethod"
    )
    assert var_2.explicit_kinematics is True
    var_3 = module_0.multi_mass_spring_damper()
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "sympy.physics.mechanics.kane.KanesMethod"
    )
    assert var_3.explicit_kinematics is True
    var_4 = module_0.multi_mass_spring_damper(apply_gravity=var_2)
    var_5 = module_0.multi_mass_spring_damper()
    var_6 = module_0.n_link_pendulum_on_cart(cart_force=bool_0)
    var_7 = var_5.__str__()
    var_8 = module_0.n_link_pendulum_on_cart(cart_force=var_5, joint_torques=bool_0)
    var_9 = module_0.multi_mass_spring_damper(apply_external_forces=var_2)
    assert (
        f"{type(var_9).__module__}.{type(var_9).__qualname__}"
        == "sympy.physics.mechanics.kane.KanesMethod"
    )
    assert var_9.explicit_kinematics is True
    module_0.n_link_pendulum_on_cart(var_6)
